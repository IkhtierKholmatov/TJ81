{Application 'FCT' logic file generated by CSPro - Standard}
PROC GLOBAL
  numeric curDs, Ds0, Ds1, Ds2, Ds3, Ds4, Ds5;
  numeric globalContext;
  numeric globalContextFactor = 8;
  numeric c, i, short, long, n, person, p, temp, ucdcb, same;
  numeric xcluster, xtype;
  numeric maxclust = 8048; // Maximum cluster number
  numeric duration;
{ {MIS}} // DHS
  numeric hhshorth =  5.0, hhshortm =  1.0; //  5 minutes for household, plus 1 minute  per member.
  numeric hhlongh  = 20.0, hhlongm  =  4.0; // 20 minutes for household, plus 4 minutes per member.
  numeric wmshortw = 17.0, wmshort4 =  8.0, wmshortp = 1.0; // 17 minutes for the woman's questions, plus  8 minutes for section 4, plus 1 minute  per additional pregnancy outcome.
  numeric wmlongw  = 50.0, wmlong4  = 25.0, wmlongp  = 5.0; // 50 minutes for the woman's questions, plus 25 minutes for section 4, plus 5 minutes per additional pregnancy outcome.
  numeric mnshort  = 12.0; // 12 minutes for man's questions.
  numeric mnlong   = 48.0; // 48 minutes for man's questions.
{{MIS} }
{{MIS}   // MIS
  numeric hhshorth =  4.0, hhshortm =  0.8; //  4.0 minutes for household, plus 0.8 minute  per member.
  numeric hhlongh  = 18.0, hhlongm  =  3.2; // 18.0 minutes for household, plus 3.2 minutes per member.
  numeric wmshortw =  5.0, wmshort4 =  2.6, wmshortp = 0.2; //  5 minutes for the woman's questions, plus 2.6 minutes for section 4, plus 0.2 minutes per additional pregnancy outcome.
  numeric wmlongw  = 18.0, wmlong4  =  8.0, wmlongp  = 0.6; // 18 minutes for the woman's questions, plus 8.0 minutes for section 4, plus 0.6 minutes per additional pregnancy outcome.
{MIS}}

  numeric teamNumber, tx, tmin, tmax;
  numeric intNumber;
  numeric tRegion;

  // hash maps for minimum and maximum durations of interview
  hashmap hhdurmin default(999);
  hashmap hhdurmax default(0);
  hashmap wmdurmin default(999);
  hashmap wmdurmax default(0);
  hashmap mndurmin default(999);
  hashmap mndurmax default(0);

  numeric times = 0; // to display short and long times of interviews
  numeric debug = 0;
  numeric di, dicdc;
  numeric DaysMonth = 30.4375;
  numeric weightch, lengthch, liestand, dateflag, agechild, remeas;
  numeric unitx, number, mdate, rdate;

  string caseid, hhdict, indict;
  numeric allteams = 0; // 1 = allteams (all teams at once), 0 = live (one team at a time)
  numeric usepara = 1; // 
  
  function validGPS(xlatitude, xlongitude)
    validGPS = (xlongitude in -180:180 & xlatitude in -90:90 & (xlongitude <> 0 | xlatitude <> 0));
  end;

  { Result of hemoglobin measurement }
  function measure1(xmeas)
    recode xmeas -> fmeasure;
	        99.4 -> 2;
	        99.5 -> 3;
			99.6 -> 6;
			99.9 -> 9;
		 missing -> 9;
		         -> 1; // valid measure
	endrecode;
	measure1 = fmeasure;
  end;

  { result of anthropometric measurement - children }
  { result of measurement based on height. If height is measured but weight is not use weight - see footnote }
  function measure2(wt,ht)
  recode ht :: wt      -> fmeasure;
	  999.4 ::         -> 2;
	  999.5 ::         -> 3;
	  999.6 ::         -> 6;
      999.9 ::         -> 9;
    missing ::         -> 9;
	        :: 99.94   -> 2;
	        :: 99.95   -> 3;
	        :: 99.96   -> 6;
	        :: 99.99   -> 9;
			:: missing -> 9;
			::         -> 1;  // height and weight both measured
  endrecode;
  measure2 = fmeasure;
  end;

  { result of anthropometric measurement - adults }
  { result of measurement based on height. If height is measured but weight is not use weight - see footnote }
  function measure3(wt,ht)
  recode ht :: wt      -> fmeasure;
	  999.4 ::         -> 2;
	  999.5 ::         -> 3;
	  999.6 ::         -> 6;
      999.9 ::         -> 9;
    missing ::         -> 9;
	        :: 999.94  -> 2;
	        :: 999.95  -> 3;
	        :: 999.96  -> 6;
	        :: 999.99  -> 9;
			:: missing -> 9;
			::         -> 1;  // height and weight both measured
  endrecode;
  measure3 = fmeasure;
  end;

  function clearminmax()
    hhdurmin.clear();
    hhdurmax.clear();
    wmdurmin.clear();
    wmdurmax.clear();
    mndurmin.clear();
    mndurmax.clear();
  end;

PROC FL_CNULL
preproc
  errmsg("The system will now analyse data collected for the field check tables.\nThis process will take SEVERAL MINUTES to complete, please be patient and do not\n switch off the tablet while the analysis is ongoing\n ");
  // All tables are only for the team.
  teamNumber = tonumber(sysparm()[1:2]);
  globalContext = teamNumber; //this comes from a PFF parameter

  // Loading current application PFF data
  // This is used to then read the .bch file to get paths to all dictionaries included in the application
  sc_CurrentPff.Load(FL_CNULL);//!! wish this could be called with no parameter for the current application, then it could be hidden inside ReadDicts() function. But it's not possible.
  
  // Reading dictionary items and their value sets
  // Note: currently only the first valueset declared in each item is available for tabulation.
  string fname = Path.Concat(application, "DictItems.csv");
  if FileEmpty(fname) = 0 then // !!! need this logic since in error some tablets have DictItems.csv under a folder of that name in .\superv
    ReadDicts(fname);
  else
    ReadDicts(fname + "\DictItems.csv");
  endif;

{ *************************************************************************** }
{                              PARADATA CALLS                                 }
{ --------------------------------------------------------------------------- }

  // Names of dictionaries as used in the paradata
  hhdict = "TJHH80";
  indict = "TJIN80";

  // Open paradata for use below
  i = paradata(open, "..\PII\work\paradata.cslog");
  // errmsg("Return code %d",i);

  // Number of cases out of range by case ID
  string Squery1 = maketext(
  "SELECT `case_key_info`.`key` as CASEID_STR1, COUNT(*) AS NUM_OUTOFRANGE "
  "FROM `field_validation_event` "
  "JOIN `event` ON `field_validation_event`.`id` = `event`.`id` "
  "JOIN `field_validation_info` ON `field_validation_event`.`field_validation_info` = `field_validation_info`.`id` "
  "JOIN `case_instance` ON `event`.`case_instance` = `case_instance`.`id` "
  "JOIN `case_key_info` ON `case_instance`.`case_info` = `case_key_info`.`case_info` "
  "WHERE `field_validation_event`.`invalueset` = 0 AND `field_validation_info`.`outofrange_allowed` = 0 "
  "GROUP BY 1 "
  "; "
  );

  // Number of error messages by case ID
  string Squery2 = maketext(
  "SELECT `case_key_info`.`key` as CASEID_STR2, COUNT(*) AS NUM_ERRMSG "
  "FROM `message_event` "
  "JOIN `event` ON `message_event`.`id` = `event`.`id` "

  "JOIN `case_instance` ON `event`.`case_instance` = `case_instance`.`id` "
  "JOIN `case_key_info` ON `case_instance`.`case_info` = `case_key_info`.`case_info` "
	
  "WHERE `message_event`.`source` != 3 "
  "GROUP BY 1 "
  "; "
  );

  // Number of fields reentered by case ID
  string Squery3 = maketext(
  "SELECT `case_key_info`.`key` as CASEID_STR3, COUNT(*) AS NUM_REENTERED "
  "FROM `field_movement_event` "
  "JOIN `event` ON `field_movement_event`.`id` = `event`.`id` "

  "JOIN `case_instance` ON `event`.`case_instance` = `case_instance`.`id` "
  "JOIN `case_key_info` ON `case_instance`.`case_info` = `case_key_info`.`case_info` "
	
  "JOIN `field_movement_instance` ON `field_movement_event`.`field_movement_instance` = `field_movement_instance`.`id` "
  "JOIN `field_entry_instance` ON `field_movement_instance`.`to_field_entry_instance` = `field_entry_instance`.`id` "
  "JOIN `field_info` ON `field_entry_instance`.`field_info` = `field_info`.`id` "
  "JOIN `name` ON `field_info`.`field_name` = `name`.`id` "

  "JOIN `field_movement_type_info` ON `field_movement_instance`.`final_field_movement_type_info` = `field_movement_type_info`.`id` "
  "JOIN `metadata_table_info` ON `metadata_table_info`.`table` = 'field_movement_type_info' "
  "JOIN `metadata_column_info` ON `metadata_table_info`.`id` = `metadata_column_info`.`metadata_table_info` AND `metadata_column_info`.`column` = 'request_type' "
  "JOIN `metadata_code_info` ON `metadata_column_info`.`id` = `metadata_code_info`.`metadata_column_info` AND `field_movement_type_info`.`request_type` = `metadata_code_info`.`code` "

  "WHERE `metadata_code_info`.`value` = 'reenter' "
  "GROUP BY 1 "
  "; "
  );
  
  // Number of cases with paradata by case ID
  string Squery4 = maketext(
  "SELECT `case_key_info`.`key` as CASEID_STR4, COUNT(*) AS NUM_PARADATA "
  "FROM `case_key_info` "
  "JOIN `name` ON `case_key_info`.`dictionary_name` = `name`.`id` "
  "WHERE `name`.`name` = '%s' OR `name`.`name` = '%s' "
  "GROUP BY 1 "
  "; "
  ,hhdict,indict);
  
  // The calls with counts of records returned
  numeric n1, n2, n3, n4;
  if usepara then
    n1 = paradata(query, fct_para, Squery1);
    n2 = paradata(query, fct_para, Squery2);
    n3 = paradata(query, fct_para, Squery3);
    n4 = paradata(query, fct_para, Squery4);
    write("Ns=%d %d %d %d",n1,n2,n3,n4);
  endif;
  // do i = 1 while i <= n4
    // write("'%s':%5d",caseid_str4(i),num_outofrange(i));
  // enddo;




{ *************************************************************************** }
{                           TABLE DEFINITIONS                                 }
{ --------------------------------------------------------------------------- }
  // Survey status
  Ds0 = SetDataSource(0, "Total questionnaires and clusters open", globalContext, globalContextFactor);
  curDs = Ds0;
  // Adding persistent branch to the root of data source 0
  AddItemBranchToDataSource(curDs, "tables_sr");

  // Table S1: Total questionnaires completed
  tables_sr = 51;
  AddItemsToDataSource(curDs, Sc_int, "FCOMP" );
  // This uses cluster as the context

{ --------------------------------------------------------------------------- }
  // Indicators by global context only
  Ds5 = SetDataSource(5, "Global context only", globalContext, globalContextFactor);
  curDs = Ds5;
  // Adding persistent branch to the root of data source 0
  AddItemBranchToDataSource(curDs, "tables_tm");

  // Table S2: Total questionnaires completed
  tables_tm = 52;
  // Adding the columns for the table,
  AddItemsToDataSource(curDs, Sc_int, "FOPEN" );
  // This uses no context beyond the global context of team

  // Table Q0: Population pyramid
  tables_tm = 20;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FSEX");
  // Adding the columns for the table,
  AddItemsToDataSource(curDs, Sc_int, "FAGE" );
  // This uses no context beyond the global context of team


{ --------------------------------------------------------------------------- }
  // Household indicators table
  Ds1   = SetDataSource(1, "Household indicators", globalContext, globalContextFactor);
  curDs = Ds1;
  // Adding persistent branch to the root of data source 1
  AddItemBranchToDataSource(curDs, "tables_hh");

  // Table C1: Household completion rate
  tables_hh = 1;
  // Adding a nesting layer to our subsequent columns
  // Calling this function repeatedly will create nested layers.
  // No hard limit is set on the maximum number of layers
  AddDsLayer(curDs, "RTOTALN", "QHTYPE");
  // Adding the columns for the table,
  // but they will be disaggregated between all items/values on previously declared layer
  AddItemsToDataSource(curDs, Sc_int, "QHRESULT", "RTOTALN" );
  // After AddItemsToDataSource() is called, the layers are cleared out, so if any more columns/items are added to the data source
  // they will be added to the root of the tree

  // Table C4: Mean household size
  tables_hh = 4;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "RTOTALN", "QHTYPE");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEM" );

  // Table C5: Eligible women and men per household
  tables_hh = 5;
  // Adding two nesting layers to our subsequent columns
  AddDsLayer(curDs, "RTOTALN", "QHTYPE");
  AddDsLayer(curDs, "FSEX");
  // Now adding columns to the table
  AddItemsToDataSource(curDs, Sc_int, "FMEM" );

  // Table P1: Clusters worked in each day by interviewing team and interviewer
  // TO DO !!!

  // Table P2: Duration of household interview
  tables_hh = 12;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDUR" );
  // Separate tables for median data
  tables_hh = tables_hh+200;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDURMED" );

  // Table P5: Interview visits - household
  tables_hh = 15;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "QUESTYPE");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FVISITS" );
  
  // Table P6: Graph of duration of each question 
  // TO DO !!!
  
  // Table P7: Mean number of error messages and re-entered data
  tables_hh = 17;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "QUESTYPE");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FERRORS" );  

  // Table P8: Distance from listing location to interview location
  tables_hh = 18;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "RTOTALN", "QHTYPE");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FGPS");

  // Table Q1: Age and date reporting
  tables_hh = 21;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FDIGIT_GRP");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDIGIT", "RTOTALN" );  

  // Table Q2A: Age displacement at ages 14/15
  tables_hh = 22;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FSEX");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FAGE15", "RTOTALN" );  

  // Table Q2B: Age displacement at ages 49/50
  tables_hh = 92;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FSEX");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FAGE50", "RTOTALN" );

  // Table Q7: Observation of mosquito nets
  tables_hh = 27;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FNETS");

  // need to add something here to distinguish between HH and biomarker questionnaires !!!


{ --------------------------------------------------------------------------- }
  // Individual indicators table for women
  Ds2   = SetDataSource(2, "Individual indicators (women)", globalContext, globalContextFactor);
  curDs = Ds2;
  // Adding persistent branch to the root of our data source 2
  AddItemBranchToDataSource(curDs, "tables_wm");

  // Table C2: Eligible woman completion rate
  tables_wm = 2;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "RTOTALN", "QTYPE");
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "QRESULT", "RTOTALN");

  // Table C6: Domestic Violence Module
  tables_wm = 6;
  // No nesting layer
  // Adding the columns for the table,
  AddItemsToDataSource(curDs, Sc_int, "FRESDV");

  // Table P3: Duration of women's interview
  tables_wm = 13;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDUR" );
  // Separate tables for median data
  tables_wm = tables_wm+200;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDURMED" );

  // Table Q3: Pregnancy date reporting: living children, dead children, stillbirths, miscarriages and abortions
  tables_wm = 23;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FPREGOUT");
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FCOMPL");

  // Table Q4: Pregnancy date displacement (years ago)
  tables_wm = 24;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FYEARS");

  // Table Q5: Age at death heaping
  tables_wm = 25;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FAGED");
  
  // Table Q6: Vaccination cards
  tables_wm = 26;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FVACC");
  
  // Table Q8: Various checks on women's interviews
  tables_wm = 28;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FSKIPSC", "FSKIPSW");

  // Table R1: Children ever born
  tables_wm = 31;
  // Adding two nesting layers to our subsequent columns
  AddDsLayer(curDs, "RTOTALN", "QTYPE");
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FCEB");

  // Table R2: Infant mortality
  tables_wm = 32;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FAGEDM");

  // Table R3: Stillbirths and neonatal deaths
  tables_wm = 33;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FPERINATAL");

  // Table R4: Treatment of fever
  tables_wm = 34;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FANTIMAL");


{ --------------------------------------------------------------------------- }
  // Individual indicators table for men
  Ds3   = SetDataSource(3, "Individual indicators (men)", globalContext, globalContextFactor);
  curDs = Ds3;
  // Adding persistent branch to the root of our data source 3
  AddItemBranchToDataSource(curDs, "tables_mn");

  // Table C3: Eligible man completion rate
  tables_mn = 3;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "RTOTALN", "QTYPE");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "QRESULT", "RTOTALN");

  // Table P4: Duration of men's interview
  tables_mn = 14;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDUR" );
  // Separate tables for median data
  tables_mn = tables_mn+200;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDURMED" );

  // Table Q9: Various checks on men's interviews
  tables_mn = 29;
  // Adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FSKIPSM");


{ --------------------------------------------------------------------------- }
  // Biomarker indicators table
  Ds4   = SetDataSource(4, "Biomarker indicators", globalContext, globalContextFactor);
  curDs = Ds4;

  // Adding persistent branch to the root of our data source 3
  AddItemBranchToDataSource(curDs, "tables_bm");

  // Table AC1: Weight/height measurement: children
  tables_bm = 101;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table AC2: Weight/height Re-measurement: children
  tables_bm = 102;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table AC3: Weight/height measurement: women
  tables_bm = 103;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table AC4: Weight/height measurement: men
  tables_bm = 104;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table AQ1: Weight digit preference: children
  tables_bm = 111;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDIGIT", "FDIGIT2", "RTOTALN");

  // Table AQ2: Height digit preference: children
  tables_bm = 112;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDIGIT", "RTOTALN");

  // Table AQ3: Implausible z-scores: children
  tables_bm = 113;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FZSCORES");

  // Table AQ6: Weight/height remeasurement compared to first measurement: children
  tables_bm = 116;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FREMEASURE");

  // Table AQ7: Height digit preference: women and men
  tables_bm = 117;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FSEX");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDIGIT", "RTOTALN");

  // Table HC1: Anemia testing among children
  tables_bm = 121;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table HC2: Anemia testing among women
  tables_bm = 122;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table HC3: Anemia testing among men
  tables_bm = 123;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  // Table HQ1: Accuracy of children's hemoglobin level
  tables_bm = 131;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDIGIT", "RTOTALN");

  // Table HQ2: Accuracy of women's and men's hemoglobin level
  tables_bm = 132;
  // Adding a nesting layer to our subsequent columns
  AddDsLayer(curDs, "FSEX");
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FDIGIT", "RTOTALN");

  // Table HR1: Children wih severe anemia
  tables_bm = 133;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FANEM", "RTOTALN");

  // Table MC1: Malaria RDT testing among children
  tables_bm = 141;
  // Now adding the columns for the table
  AddItemsToDataSource(curDs, Sc_int, "FMEASURE", "RTOTALN");

  //Opening XML output file
  StartWriteXml(Path.Concat(application, "output.xml"));
  
{ *************************************************************************** }
// Loop through teams - too be removed later - only for testing
if allteams then // when allteams run all teams one after the other
  tmin = 1;
  tmax = 48;
else  // when live only needs to run for the current team
  tmin = teamNumber;
  tmax = teamNumber;
endif;  
do tx = tmin while tx <= tmax
  ClearDataMatrix();
  clearminmax();
  globalContext = tx;
  SetGlobalContext(globalContext, globalContextFactor);
  //set access(TJHH80, OrderType.Sequential);
  set first(TJHH80);

  // Table S2: Total questionnaires completed
  curDs = Ds5;
  tables_tm = 52;

  setfile(CONTSUP, "../PII/Ref/Superv" + edit("99",tx) + "00.dat");
  teamNumber = tx;
  curDs = Ds5;
  tables_tm = 52;
  forcase CONTSUP do
    if SSAMPLE in 1:maxclust & count(SALLHH where SINTNUM <> 0) then // valid main fieldwork cluster numbers that have been opened
      FOPEN = 0;
      Itab(curDs, 0);   // uses 0 for the context as we only want the team
      if !SFINDATE in 0,notappl then        // clusters that have been closed
        FOPEN = 1;
        Itab(curDs, 0); // uses 0 for the context as we only want the team
      else                                                              // clusters still open
        FOPEN = 2;
        Itab(curDs, 0); // uses 0 for the context as we only want the team
      endif;
    endif;        
  enddo;


{ *************************************************************************** }
{                             QUESTIONNAIRES                                  }
{ --------------------------------------------------------------------------- }
numeric oldcluster = 0;
forcase TJHH80 do
  if !oldcluster | oldcluster <> QHCLUST then
    oldcluster = QHCLUST;
    // errmsg("working on cluster %03d", QHCLUST);
  endif;
  if teamNumber <> QHTEAM {int(QHSUPERV / 100)-10} then // use supervisor number if team number does not exist
  	// write("Team number does not match - expected %d, found %d", teamNumber, QHTEAM);
  endif;
  intNumber  = QHINTNUM;
  tRegion    = 10000*QHREGION;

  //filtering for only one team (normally this wouldn't be needed, since this will be executed by the supervisor, who will only have data for his/her own team)
  // if testing & QHTEAM <> globalContext then
  //   next;
  // endif;
  if !(allteams & int(QHSUPERV / 100) <> globalContext) then
//  next;
//endif;

  questype = 1;

{ *************************************************************************** }
{                               HOUSEHOLD                                     }
{ --------------------------------------------------------------------------- }
  // Tabulating table S1: Total questionnaires completed
  // Context is cluster number
  curDs = Ds0;
  tables_sr = 51;
  fcomp = 1;
  Itab(curDs, QHCLUST);
  Itab(curDs, tRegion);
  if QHRESULT = 1 then // Complete
    fcomp = fcomp+1;
    Itab(curDs, QHCLUST);
    Itab(curDs, tRegion);
  else // Incomplete
    fcomp = fcomp+2;
    Itab(curDs, QHCLUST);
    Itab(curDs, tRegion);
  endif;

{ --------------------------------------------------------------------------- }
  // Tabulating table S2: Clusters opened and closed
  // Context is just the global context - team
  // done higher up

{ --------------------------------------------------------------------------- }
  curDs = Ds1;
  // Tabulating table C1: Household completion rate
  // Context is interviewer number
  // QHRESULT value tabulated directly from the data
  // RTOTALN is set to zero by default
  tables_hh = 1;
  Itab(curDs, intNumber);
  Itab(curDs, tRegion );
  
//if QHRESULT <> 1 then next endif;  
 if QHRESULT = 1 then
  
{ --------------------------------------------------------------------------- }
  // Tabulating table C4: Mean household size
  tables_hh = 4;
  fmem = 0;
  Itab(curDs, intNumber);
  Itab(curDs, tRegion  );
  fmem = 1;
  Itab(curDs, intNumber, count(QHSEC01 where QH05 = 1)); // de jure members only
  Itab(curDs, tRegion  , count(QHSEC01 where QH05 = 1)); // de jure members only

{ --------------------------------------------------------------------------- }
  // Tabulating table C5: Eligible women and men per household
  tables_hh = 5;
  fsex = 2; // Women
  fmem = 0;
  Itab(curDs, intNumber);
  Itab(curDs, tRegion  );
  fmem = 1;
  Itab(curDs, intNumber, count(QHSEC01 where QH06 = 1 & QH04 = fsex & QH09 <> 0)); // de facto eligible women 
  Itab(curDs, tRegion  , count(QHSEC01 where QH06 = 1 & QH04 = fsex & QH09 <> 0)); // de facto eligible women
{{+Man}  
  if QHELIGM = 1 then
    fsex = 1; // Men
    fmem = 0;
    Itab(curDs, intNumber);
    Itab(curDs, tRegion  );
    fmem = 1;
    Itab(curDs, intNumber, count(QHSEC01 where QH06 = 1 & QH04 = fsex & QH10 <> 0)); // de facto eligible men
    Itab(curDs, tRegion  , count(QHSEC01 where QH06 = 1 & QH04 = fsex & QH10 <> 0)); // de facto eligible men
  endif;
{Man+}} {No man in TJ}

{ --------------------------------------------------------------------------- }
  // Tabulating table P2: Duration of household interview
  tables_hh = 12;
  if QHVISITS = 1 then // can only calculate duration for single visits currently
    duration = (QH307H-QH100H)*60+(QH307M-QH100M);
	if special(duration) | duration <= 0 | duration > 120 then
	  write("ID=%04d%04d Visits=%d duration=%d start=%d:%d end=%d:%d", QHCLUST, QHNUMBER, QHVISITS, duration, QH100H, QH100M, QH307H, QH307M);
	else
      // find minimum and maximum by interview and by region
      if hhdurmin(intNumber) > duration then hhdurmin(intNumber) = duration; endif;
      if hhdurmax(intNumber) < duration then hhdurmax(intNumber) = duration; endif;
      if hhdurmin(tRegion  ) > duration then hhdurmin(tRegion  ) = duration; endif;
      if hhdurmax(tRegion  ) < duration then hhdurmax(tRegion  ) = duration; endif;

	  short = hhshorth + hhshortm*QHMEMBER;
	  long  = hhlongh  + hhlongm *QHMEMBER;

	  if duration <= short then
        fdur = 4;
        Itab(curDs, intNumber );
        Itab(curDs, tRegion   );
        if times then write("ID:%04d%04d short Visits=%d duration=%d short=%d start=%d:%d end=%d:%d", QHCLUST, QHNUMBER, QHVISITS, duration, short, QH100H, QH100M, QH307H, QH307M); endif;
	  endif;

	  if duration >= long then
        fdur = 5;
        Itab(curDs, intNumber );
        Itab(curDs, tRegion   );
        if times then write("ID:%04d%04d long  Visits=%d duration=%d long =%d start=%d:%d end=%d:%d", QHCLUST, QHNUMBER, QHVISITS, duration, long , QH100H, QH100M, QH307H, QH307M); endif;
	  endif;

      fdur = 6;
      Itab(curDs, intNumber );
      Itab(curDs, tRegion   );

	  // Now add median duration of interview to separate table
	  tables_hh = tables_hh+200;
  	  fdurmed = duration;
	  if duration > 99 then fdurmed = 99 endif;
      Itab(curDs, intNumber );
      Itab(curDs, tRegion   );
	  
    endif; // end of valid duration data
  endif; // end of QHVISITS = 1

{ --------------------------------------------------------------------------- }
  // Tabulating table P5: Interview visits - household
  tables_hh = 15;
  fvisits = QHVISITS;
  if QHVISITS > 4 then fvisits = 4 endif;
  Itab(curDs, intNumber);
  Itab(curDs, tRegion  );
  fvisits = 5; // Total
  Itab(curDs, intNumber);
  Itab(curDs, tRegion  );

{ --------------------------------------------------------------------------- }
  // Tabulating table P7: Mean number of error messages and re-entered data
  tables_hh = 17;
  // use paradata and get number of errors and re-entered data !!!!
  caseid = maketext("%04d%04d  ",QHCLUST,QHNUMBER);
  i = seek(caseid_str1 = caseid);
  if i then
    ferrors = 1;
    Itab(curDs, intNumber, num_outofrange(i));
    Itab(curDs, tRegion  , num_outofrange(i));
  endif;
  i = seek(caseid_str2 = caseid);
  if i then
    ferrors = 2;
    Itab(curDs, intNumber, num_errmsg(i));
    Itab(curDs, tRegion  , num_errmsg(i));
  endif;
  i = seek(caseid_str3 = caseid);
  if i then
    ferrors = 3;
    Itab(curDs, intNumber, num_reentered(i));
    Itab(curDs, tRegion  , num_reentered(i));
  endif;
  i = seek(caseid_str4 = caseid);
  if i then
    ferrors = 4;
    Itab(curDs, intNumber{, num_paradata(i)});	// don't use num_paradata - just count each case once
    Itab(curDs, tRegion  {, num_paradata(i)});	// don't use num_paradata - just count each case once
  endif;

{ --------------------------------------------------------------------------- }
  // Tabulating table P8: Distance from listing location to interview location
  tables_hh = 18;
  if QHRESULT = 1 then
    fgps = 1;
    if validGPS(GHLATITUDE,GHLONGITUDE) then
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
    endif;
    inc(fgps); // Total number of households
    Itab(curDs, intNumber);
    Itab(curDs, tRegion  );
  endif;

{ --------------------------------------------------------------------------- }
  // Tabulating table Q7: Observation of mosquito nets
  tables_hh = 27;
  fnets = 0;
  Itab(curDs, intNumber, count(QHSEC03));
  Itab(curDs, tRegion  , count(QHSEC03));
  fnets = 1;
  Itab(curDs, intNumber, count(QHSEC03 where QH140 = 1));
  Itab(curDs, tRegion  , count(QHSEC03 where QH140 = 1));
  

{ *************************************************************************** }
{                            HOUSEHOLD MEMBERS                                }
{ --------------------------------------------------------------------------- }
  // Loop through all household members and check individual interviews
  for person in record QHSEC01 do
    fsex = QH04;

{ --------------------------------------------------------------------------- }
    // Tabulating table Q0: Population pyramid
    curDs = Ds5;
    tables_tm = 20;
	fage = QH07;
    Itab(curDs, 0);

{ --------------------------------------------------------------------------- }
    // Tabulating table Q1: Age and date reporting
    curDs = Ds1;
    tables_hh = 21;
	if QH07 in 10:89 then
	  fdigit = QH07 % 10;
      fdigit_grp = 1;
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
      if QH07 in 23:62 then
        fdigit_grp = 2;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
	  endif;
    endif;

{ --------------------------------------------------------------------------- }
    // Tabulating table Q2A: Age displacement at ages 14/15
	// Women in all households, men in households eligible for the man's questionnaire (or all HH if no man's questionnaire)
	if QH04 = 2 | (QH04 = 1 {+Man} & QHELIGM = 1 {Man+} ) then 
      tables_hh = 22;
	  if QH07 in 12:18 then
	    FAGE15 = QH07;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
	  endif;
      tables_hh = 92;
      if QH07 in 47:53 then
	    FAGE50 = QH07;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
      endif;
	endif;


{ *************************************************************************** }
{                               INDIVIDUALS                                   }
{ --------------------------------------------------------------------------- }
    // Load the individual questionnaire
    QCLUSTER = QHCLUST;
    QNUMBER  = QHNUMBER;
    QLINE    = QH09;
{+Man}
    if !QLINE & QH10 then
      QLINE = QH10;
    endif;
{Man+}
    if QLINE & loadcase(TJIN80, QCLUSTER, QNUMBER, QLINE) then

      // Individual questionnaire team number and interviewer code
	  if teamNumber <> QTEAM {int(QSUPERV / 100)-10} then // use supervisor number if team number does not exist
	    // write("Team number does not match - expected %d, found %d", teamNumber, QTEAM);
	  endif;
      intNumber = QINTNUM;
	  if QTYPE = notappl then QTYPE = QHTYPE endif; // in case QTYPE is not set
	  questype = 4-QQTYPE; // women = 2, men = 3

{ --------------------------------------------------------------------------- }
      curDs = Ds0;
      // Tabulating table S1: Total questionnaires completed - for women and men
      // Context is cluster number
      tables_sr = 51;
      fcomp = 4;
	  if QQTYPE = 1 then fcomp = 7 endif;
      Itab(curDs, QHCLUST);
      Itab(curDs, tRegion); 
      if QRESULT = 1 then // Complete
        fcomp = fcomp+1;
        Itab(curDs, QHCLUST);
        Itab(curDs, tRegion);
      else // Incomplete
        fcomp = fcomp+2;
        Itab(curDs, QHCLUST);
        Itab(curDs, tRegion);
      endif;

{ --------------------------------------------------------------------------- }
      // Tabulating table P5: Interview visits - for women and men
      curDs = Ds1;
      tables_hh = 15;
      fvisits = QVISITS;
      if QVISITS > 4 then fvisits = 4 endif;
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
      fvisits = 5;
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );

{ --------------------------------------------------------------------------- }
      // Tabulating table P7: Mean number of error messages and re-entered data - for women and men
      curDs = Ds1;
      tables_hh = 17;
      // use paradata and get number of errors and re-entered data !!!!
      caseid = maketext("%04d%04d%02d",QCLUSTER,QNUMBER,QLINE);
      i = seek(caseid_str1 = caseid);
      if i then
        ferrors = 1;
        Itab(curDs, intNumber, num_outofrange(i));
        Itab(curDs, tRegion  , num_outofrange(i));
      endif;
      i = seek(caseid_str2 = caseid);
      if i then
        ferrors = 2;
        Itab(curDs, intNumber, num_errmsg(i));
        Itab(curDs, tRegion  , num_errmsg(i));
      endif;
      i = seek(caseid_str3 = caseid);
      if i then
        ferrors = 3;
        Itab(curDs, intNumber, num_reentered(i));
        Itab(curDs, tRegion  , num_reentered(i));
      endif;
      i = seek(caseid_str4 = caseid);
      if i then
        ferrors = 4;
        Itab(curDs, intNumber{, num_paradata(i)});	// don't use num_paradata - just count each case once
        Itab(curDs, tRegion  {, num_paradata(i)});	// don't use num_paradata - just count each case once
      endif;

{ --------------------------------------------------------------------------- }
      // Tabulating table P8: Distance from listing location to interview location
      curDs = Ds1;
      tables_hh = 18;
	  if QRESULT = 1 then
        fgps = 3;
        if QQTYPE = 1 then fgps = 5 endif;
        if validGPS(GILATITUDE, GILONGITUDE) then
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
        endif;
        inc(fgps); // Total number of women or men
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
        if validGPS(GHLATITUDE, GHLONGITUDE) & validGPS(GILATITUDE, GILONGITUDE) then
	      fgps = 7;
		  if gps(distance, GHLATITUDE, GHLONGITUDE, GILATITUDE, GILONGITUDE) > 100+50*(QTYPE=2) then // > 100m in urban areas and 150m in rural areas
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
		  endif;
          inc(fgps); // Total number of women or men with valid GPS and valid GPS at the household level
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
	    endif;
      endif;


{ *************************************************************************** }
{                                 WOMEN                                       }
{ --------------------------------------------------------------------------- }
      if QQTYPE = 2 then // Women
		questype = 2;

        curDs = Ds2;
        // Tabulating table C2: Eligible woman completion rate
        tables_wm = 2;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );

//      if QRESULT <> 1 then next endif; // incomplete interview - go to end of the loop
       if QRESULT = 1 then

{ --------------------------------------------------------------------------- }
{+DV}		
        // Tabulating table C6: Domestic Violence Module
        tables_wm = 6;
        if QHNUMDV = QLINE then               { woman eligible for domestic violence }
          fresdv = 1;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
          if DV01 <> 1 then                   { privacy not obtained }
            fresdv = 2;
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
          endif;
        endif;
{DV+}

{ --------------------------------------------------------------------------- }
        // Tabulating table P3: Duration of women's interview
        tables_wm = 13;
        if QVISITS = 1 then // can only calculate duration for single visits currently
          duration = (Q1116H-Q101H)*60+(Q1116M-Q101M);
	      if special(duration) | duration <= 0 | duration > 120 then
	        write("ID:%04d%04d%02d Visits=%d duration=%d start=%d:%d end=%d:%d", QCLUSTER, QNUMBER, QLINE, QVISITS, duration, Q101H, Q101M, Q1116H, Q1116M);
	      else
            // find minimum and maximum by interview and by region
            if wmdurmin(intNumber) > duration then wmdurmin(intNumber) = duration; endif;
            if wmdurmax(intNumber) < duration then wmdurmax(intNumber) = duration; endif;
            if wmdurmin(tRegion  ) > duration then wmdurmin(tRegion  ) = duration; endif;
            if wmdurmax(tRegion  ) < duration then wmdurmax(tRegion  ) = duration; endif;

	        short = wmshortw + wmshort4*(totocc(TJIN80.QWSEC04)>0) + wmshortp*(totocc(TJIN80.QWSEC2B)-(totocc(TJIN80.QWSEC04)>0));
	        long  = wmlongw  + wmlong4 *(totocc(TJIN80.QWSEC04)>0) + wmlongp *(totocc(TJIN80.QWSEC2B)-(totocc(TJIN80.QWSEC04)>0));

	        if duration <= short then
              fdur = 4;
              Itab(curDs, intNumber );
              Itab(curDs, tRegion   );
              if times then write("ID:%04d%04d%02d short Visits=%d duration=%d short=%d start=%d:%d end=%d:%d", QCLUSTER, QNUMBER, QLINE, QVISITS, duration, short, Q101H, Q101M, Q1116H, Q1116M); endif;
	        endif;

	        if duration >= long then
              fdur = 5;
              Itab(curDs, intNumber );
              Itab(curDs, tRegion   );
              if times then write("ID:%04d%04d%02d long  Visits=%d duration=%d long =%d start=%d:%d end=%d:%d", QCLUSTER, QNUMBER, QLINE, QVISITS, duration, long , Q101H, Q101M, Q1116H, Q1116M); endif;
	        endif;

            fdur = 6;
            Itab(curDs, intNumber );
            Itab(curDs, tRegion   );

            // Now add median duration of interview to separate table
            tables_wm = tables_wm+200;
            fdurmed = duration;
            if duration > 99 then fdurmed = 99 endif;
            Itab(curDs, intNumber );
            Itab(curDs, tRegion   );

	      endif; // end of valid duration data
        endif; // end of QVISITS = 1

{ --------------------------------------------------------------------------- }
        // Tabulating table R1: Children ever born
        tables_wm = 31;
		fceb = 0;
        Itab(curDs, intNumber );
        Itab(curDs, tRegion   );
		fceb = 1;
        Itab(curDs, intNumber, count(QWSEC2B where Q223 = 1));
        Itab(curDs, tRegion  , count(QWSEC2B where Q223 = 1));


{ *************************************************************************** }
{                            PREGNANCY HISTORY                                }
{ --------------------------------------------------------------------------- }
		curDs = Ds2;
        for p in record QWSEC2B do

{ --------------------------------------------------------------------------- }
          // Tabulating table Q3: Pregnancy date reporting: living children, dead children, stillbirths, miscarriages and abortions
          tables_wm = 23;
          recode Q223 -> fpregout;
		           1  -> Q224;
				   2  -> 3;
				  3,4 -> 4;
	      endrecode;
		  numeric isday, ismonth, isyear, isage;
          isday   = valid(Q220D);
          ismonth = valid(Q220M);
          isyear  = validyr(Q220Y);
          isage   = valid(Q225);
          recode isyear :: ismonth :: isday :: isage -> Fcompl;
                   1    ::    1    ::   1   ::       -> 0;
                   1    ::    1    ::       ::       -> 1;
                   1    ::         ::       ::   1   -> 2;
                   1    ::         ::       ::       -> 3;
                   0    ::    0    ::       ::   1   -> 4;
                        ::         ::       ::       -> 5;
          endrecode;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );

{ --------------------------------------------------------------------------- }
          // Tabulating table Q4: Pregnancy date displacement (years ago)
          tables_wm = 24;
          di = cmcode( QINTM, QINTY );
		  dicdc = CDCode( QINTY, QINTM, QINTD );
		  if !special(Q220CD) & Q220CD <> 0 then // Century day code already calculated in the data
		    fyears = int((dicdc - Q220CD) / (DaysMonth * 12));
		  else
            if validyr(Q220Y) & valid(Q220M) then
              temp = Q220D;
              if !valid(Q220D) then // using the last day of the month to be on the conservative side
                recode Q220M -> temp;
             1,3,5,7,8,10,12 -> 31;
	  	            4,6,9,11 -> 30;
		                   2 -> 28+(Q220Y%4=0);
                endrecode;
	          endif;
	          Q220CD = CDCode( Q220Y, Q220M, temp );
              fyears = int((dicdc - Q220CD) / (DaysMonth * 12));
		    elseif validyr(Q220Y) then
              ucdcb = setub( Q220M, Q220Y, 9999 );
			  fyears = int((di - ucdcb)/12);
            else
			  fyears = default;
            endif;
		  endif;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );

{ --------------------------------------------------------------------------- }
{ {MIS}} // Age at death not collected in MIS

          // Tabulating table Q5: Age at death heaping
          tables_wm = 25;
          if Q224 = 2 & fyears < 15 then   { deaths to children born in the last 15 years }
            unitx  = Q228U;
            number = Q228N;
            recode unitx :: number -> faged;
                     2   :: 8:12   -> number-8;  { codes 0::4 }
                     3   ::   1    -> 5;
                     2   :: 13:16  -> number-7;  { codes 6::9 }
                         ::        -> notappl;
            endrecode;
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
          endif;

{ --------------------------------------------------------------------------- }
          // Tabulating table R2: Infant mortality

          if validyr(Q220Y) & Q220Y >= QINTY-15 then       { births last 15 years }
            tables_wm = 32;
	  	    fagedm = notappl;
		  
		    if Q224 = 1 then
		      fagedm = 6;
            elseif Q224 = 2 then
		      recode Q228U :: Q228N -> fagedm;
		               1   ::  0:30 ->   0;
				       1   :: 31:96 ->   1;
				       2   ::   0   ->   0;
				       2   ::  1:11 ->   1;
					   2   :: 12:96 ->   3;
					   3   ::  1:96 ->   3;
				           ::       ->   4;
			  endrecode;	  
            endif;	
            if Q224 in 1,2 then
              Itab(curDs, intNumber );
              Itab(curDs, tRegion   );
			endif;

            // Tabulating table R3: Stillbirths and neonatal deaths
            tables_wm = 33;
			if Q223 = 2 then // stillbirth
			  fperinatal = 1;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
			elseif fagedm = 0 then // neonatal death
			  fperinatal = 2;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
			endif;
			
          endif;
{{MIS} }
{ --------------------------------------------------------------------------- }
        enddo; // end of loop for pregnancies

{ --------------------------------------------------------------------------- }
{ {MIS}} // Vaccination not collected in MIS

        // Tabulating table Q6: Vaccination cards

        tables_wm = 26;
        for p in record QWSEC05 do
          if Q224(Q503) = 1 then { Living children }
            if Q504 in 1:3 then  { with a vaccination card or other document }
              fvacc = 1;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
            endif;
            if Q507 in 1:3 then  { vaccination card or other document seen }
              fvacc = 2;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
            endif;
			if Q510 in 1,2,6 then { vaccination card photographed or not }
			  fvacc = 2+Q510;
			  if Q510 = 6 then fvacc = 5 endif;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
            endif;
            fvacc = 6;             { all children }
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
          endif;
        enddo;

{{MIS} }
{ --------------------------------------------------------------------------- }
        // Tabulating table Q8: Various checks on women's interviews: children
        tables_wm = 28;
		fskipsw = notappl; // set women's columns to notappl;
        for p in record QWSEC04 do
		  if Q405 in 1,3 then // includes last live births and last stillbirths, but not miscarriages or abortions }
		    if Q412 = 2 then
              fskipsc = 1;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
            endif;
            fskipsc = 2;
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
		  endif;
		enddo;

{ {MIS}} // Vaccination not collected in MIS
        for p in record QWSEC05 do
		  if Q224(Q503) = 1 then // living children only
		    // No vaccinations given - none on card
		    if (D509B  = 0 & {zzD509H  = 0 &} D509P0 = 0 & 				  // BCG, Hep.B (birth), Polio 0
                D509P1 = 0 & D509P2 = 0 & D509P3 = 0 & D509IPV = 0 &  // Polio 1-3, IPV
                D509D1 = 0 & D509D2 = 0 & D509D3 = 0 & D509D4  = 0 &  // Pentavalent or DPT 1-4
                D509N1 = 0 & D509N2 = 0 & D509N3 = 0 &                // Pneumococcal 1-3
                D509R1 = 0 & D509R2 = 0 & D509R3 = 0 &                // Rotavirus 1-3
                D509M1 = 0 & D509M2 = 0 & D509Y  = 0 & D509V   = 0 & D509D = 0 &      // Measles 1,2, Vitamin A
			    // None in questions that follow
			   (Q513 = 2 | (Q514 = 2 & {zzQ515 = 2 &} Q517 = 2 & Q520 = 2 & Q521 = 2 & Q523 = 2 & Q525 = 2 & Q527 = 2 & Q528A = 2)))
		    then
              fskipsc = 3;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
            endif;
            fskipsc = 4;
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
		  endif;
		enddo;
{{MIS} }

        for p in record QWSEC6A do
          if Q224(Q603) then

		    if Q608 <> 1 then
              fskipsc = 5;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
			endif;

			if Q618 <> 1 & Q621 <> 1 then
              fskipsc = 6;
              Itab(curDs, intNumber);
              Itab(curDs, tRegion  );
            endif;			  
            fskipsc = 7;
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
		  endif;
		enddo;

        // Tabulating table Q8: Various checks on women's interviews: women
		fskipsc = notappl; // set children's columns to notappl;

        if Q702 = 3 then	// never married
		  fskipsw = 1;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
        if Q210 <> 1 then	// no non-live pregnancies
		  fskipsw = 2;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		if Q307 = "" then 	// not currently using any method
		  fskipsw = 3;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		if Q722 = 0 then	// Never had sex
		  fskipsw = 4;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		// Last sex > 1 year ago
		if !QSHORT & ((Q723U = 2 & Q723N in 52:90) | (Q723U = 3 & Q723N in 12:90) | (Q723U = 4 & Q723N in 1:90)) then 
		  fskipsw = 5;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		if !QSHORT & Q1001 <> 1 then	// Never heard of HIV/AIDS
		  fskipsw = 6;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;

        fskipsw = 7;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
		if !QSHORT then		// Long questionnaire only - for Q723 and 1001
          fskipsw = 8;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;

{ --------------------------------------------------------------------------- }
        // Tabulating table R4: Treatment for fever
        tables_wm = 34;
		for p in record QWSEC6A
		  if Q630 = 1 then
		    if poschar("ABC"    ,Q631) then fantimal = 1; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    if poschar("F"      ,Q631) then fantimal = 2; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    if poschar("DEGHIJK",Q631) then fantimal = 3; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    if poschar("LMNOP"  ,Q631) then fantimal = 4; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    if poschar("QRST"   ,Q631) then fantimal = 5; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    if poschar("X"      ,Q631) then fantimal = 6; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    if poschar("Z"      ,Q631) then fantimal = 7; Itab(curDs, intNumber); Itab(curDs, tRegion  ); endif;
		    fantimal = 8; Itab(curDs, intNumber); Itab(curDs, tRegion  ); 
		  endif;
		enddo;

       endif; // QRESULT = 1 for women

{ *************************************************************************** }
{                                   MEN                                       }
{ --------------------------------------------------------------------------- }
{+Man}	
      elseif QQTYPE = 1 then // Men
		questype = 3;

        curDs = Ds3;
        // Tabulating table C3: Eligible man completion rate
        tables_mn = 3;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );

//      if QRESULT <> 1 then next endif; // incomplete interview - go to end of the loop
       if QRESULT = 1 then

{ --------------------------------------------------------------------------- }
        // Tabulating table P4: Duration of men's interview
        tables_mn = 14;
        if QVISITS = 1 then // can only calculate duration for single visits currently
          duration = (QM819H-QM101H)*60+(QM819M-QM101M);
	      if special(duration) | duration <= 0 | duration > 120 then
	        write("ID:%04d%04d%02d Visits=%d duration=%d start=%d:%d end=%d:%d", QCLUSTER, QNUMBER, QLINE, QVISITS, duration, QM101H, QM101M, QM819H, QM819M);
	      else
            // find minimum and maximum by interview and by region
            if mndurmin(intNumber) > duration then mndurmin(intNumber) = duration; endif;
            if mndurmax(intNumber) < duration then mndurmax(intNumber) = duration; endif;
            if mndurmin(tRegion  ) > duration then mndurmin(tRegion  ) = duration; endif;
            if mndurmax(tRegion  ) < duration then mndurmax(tRegion  ) = duration; endif;

	        short = mnshort;
	        long  = mnlong ;

	        if duration <= short then
              fdur = 4;
              Itab(curDs, intNumber );
              Itab(curDs, tRegion   );
              if times then write("ID:%04d%04d%02d short Visits=%d duration=%d short=%d start=%d:%d end=%d:%d", QCLUSTER, QNUMBER, QLINE, QVISITS, duration, short, QM101H, QM101M, QM819H, QM819M); endif;
	        endif;

	        if duration >= long then
              fdur = 5;
              Itab(curDs, intNumber );
              Itab(curDs, tRegion   );
              if times then write("ID:%04d%04d%02d long  Visits=%d duration=%d long =%d start=%d:%d end=%d:%d", QCLUSTER, QNUMBER, QLINE, QVISITS, duration, long , QM101H, QM101M, QM819H, QM819M); endif;
	        endif;

            fdur = 6;
            Itab(curDs, intNumber );
            Itab(curDs, tRegion   );

            //Now add median duration of interview to separate table
            tables_mn = tables_mn+200;
            fdurmed = duration;
            if duration > 99 then fdurmed = 99 endif;
            Itab(curDs, intNumber );
            Itab(curDs, tRegion   );

	      endif; // end of valid duration data
        endif; // end of QVISITS = 1

{ --------------------------------------------------------------------------- }
        // Tabulating table Q9: Various checks on men's interviews
        tables_mn = 29;

        if QM402 = 3 then	// never married
		  fskipsm = 1;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
        if QM201 = 2 & QM206 <> 1 then	// never had a child
		  fskipsm = 2;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		if QM414 = 0 then	// Never had sex
		  fskipsm = 3;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		// Last sex > 1 year ago
		if (QM415U = 2 & QM415N in 52:90) | (QM415U = 3 & QM415N in 12:90) | (QM415U = 4 & QM415N in 1:90) then 
		  fskipsm = 4;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		if QM701 <> 1 then	// Never heard of HIV/AIDS
		  fskipsm = 5;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;

        fskipsm = 6;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );


{ --------------------------------------------------------------------------- }
       endif; // QRESULT = 1 for men
{Man+}
      endif;

    endif; // loadcase for individual
	
  enddo; // loop through HH members

{ *************************************************************************** }
{                               BIOMARKERS                                    }
{ --------------------------------------------------------------------------- }

  questype = 4;

{ --------------------------------------------------------------------------- }
  // Tabulating table P5: Interview visits - biomarkers
  curDs = Ds1;
  tables_hh = 15;
  fvisits = QBVISITS;
  // intNumber = // no separate biomarker tech code on the cover
  if QBVISITS > 4 then fvisits = 4 endif;
  Itab(curDs, intNumber);
  Itab(curDs, tRegion  );
  fvisits = 5; // Total
  Itab(curDs, intNumber);
  Itab(curDs, tRegion  );
  
{ --------------------------------------------------------------------------- }
 
  curDs = Ds4;

  for c in record QBSEC01 do

    intNumber = QB113;
{ --------------------------------------------------------------------------- }
//                             ANTHROPOMETRY

    // Look for remeasurement data for this child
	clear(RMEASURE);
	RCLUSTER = QHCLUST;
	RNUMBER  = QHNUMBER;
	R102L    = QB102;
	remeas = loadcase(RMEASURE, RCLUSTER, RNUMBER, R102L);

    if QH07(QB102) in 0:4 & QB104 in 0:4 then            { children under 5 }
	
{ --------------------------------------------------------------------------- }
      // Tabulating table AC1: Weight/height measurement: children
      tables_bm = 101;
      { result of measurement based on height. If height is measured but weight is not use weight - see footnote }
	  fmeasure = measure2(QB106,QB108);
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );

{ --------------------------------------------------------------------------- }
      // Tabulating table AC2: Weight/height Re-measurement: children
      if RTYPE in 1,2,3 then
        tables_bm = 102;
        { result of re-measurement based on height. If height is measured but weight is not use weight - see footnote }
	    fmeasure = measure2(RFWEIGHT,RFHEIGHT);
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
	  endif;
      
{ --------------------------------------------------------------------------- }
      // Tabulating table AQ1: Weight digit preference: children
      tables_bm = 111;
	  if !special(QB106) & QB106 < 99 then
        fdigit  = GetDecimal( QB106, 1 );
        fdigit2 = GetDecimal( QB106, 2 );
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
	  endif;

      // Tabulating table AQ2: Height digit preference: children
      tables_bm = 112;
	  if !special(QB108) & QB108 < 999 then
        fdigit = GetDecimal( QB108, 1 );
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
	  endif;

{ --------------------------------------------------------------------------- }
      // Tabulating table AQ3: Implausible z-scores: children
      tables_bm = 113;
	  // set up height and weight variables to use.  Use re-measurement if flagged and has been re-measured
      weightch = QB106;
      lengthch = QB108;
      liestand = QB109;
      { !!!! change weight and height according to type of remeasurement when present }
      if RTYPE in 2,3 & !RFWEIGHT in 99.90:99.98,missing,notappl & !RFHEIGHT in 999.0:999.8,missing,notappl then
        weightch = RFWEIGHT;
        lengthch = RFHEIGHT;
        liestand = RFLYNSTN;
      endif;
	  
	  // calculate age in days
      dateflag = 0;
      if valid(QB103M) & validyr(QB103Y) then
        { Age of child in days }
		temp = QB103D;
        if !QB103D in 1:31 then temp = 15 endif;
        agechild = CDCode( QBINTY, QBINTM, QBINTD ) - CDCode( QB103Y, QB103M, temp );
        dateflag = 1;
      else
        agechild = 9999;
      endif;

      // Calculate anthropometric Z-scores
      WHO_anthro( weightch, lengthch, liestand, QH04(QB102), agechild, dateflag, QB102 );

      if fmeasure = 1 then // weight and height/length both complete
	    if zwhz in missing,notappl,9996:9998 | zwhz < -5 | zwhz > 5 then // weight for height z-score out of range
          fzscores = 1;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
	    endif;	  
        fzscores = 2;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
      endif;
      if dateflag = 1 & !special(lengthch) & lengthch < 999 then // age and height/length both complete
	    if zhaz in missing,notappl,9996:9998 | zhaz < -6 | zhaz > 6 then // height for age z-score out of range
          fzscores = 3;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
	    endif;	  
        fzscores = 4;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
      endif;
      if dateflag = 1 & !special(weightch) & weightch < 99 then // age and weight both complete
	    if zwaz in missing,notappl,9996:9998 | zwaz < -6 | zwaz > 5 then // weight for age z-score out of range
          fzscores = 5;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
	    endif;	  
        fzscores = 6;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
      endif;

{ --------------------------------------------------------------------------- }
      // Tabulating table AQ6: Weight/height remeasurement
      tables_bm = 116;
	  same = 0;
	  if !special(QB108) & QB108 < 99 & !special(RFHEIGHT) & RFHEIGHT < 999 then
	    if QB108 = RFHEIGHT then // height measures are exactly the same
		  same = 1;
		  fremeasure = 1;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
        endif;
      endif;
	  if !special(QB106) & QB106 < 99 & !special(RFWEIGHT) & RFWEIGHT <  99 then
	    if QB106 = RFWEIGHT then // weight measures are exactly the same
		  fremeasure = 2;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		  if same then // both height and weight are the same
		    fremeasure = 3;
            Itab(curDs, intNumber);
            Itab(curDs, tRegion  );
		  endif;
        endif;
      endif;
	  if !special(R115D) then // remeasurement date recorded
	    mdate = cdcode(QB115Y, QB115M, QB115D);
		rdate = cdcode( R115Y,  R115M,  R115D);
        fremeasure = 4 + rdate - mdate;
		if rdate < mdate then // ignore these cases
		  write("Date of remeasurement (%d/%d/%d) before date of original measurement (%d/%d/%d)", 
		          R115D, R115M, R115Y, QB115D, QB115M, QB115Y);
		  fremeasure = notappl;
		elseif fremeasure > 6 then
		  fremeasure = 6
		endif;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
	  endif;
	  if RTYPE in 1,2,3 then
	    fremeasure = 7;	// Number of children with remeasurement records
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );
      endif;

    endif;                           { end children under 5 }
	
{ --------------------------------------------------------------------------- }
//                           HEMOGLOBIN
{
    intNumber = zzQB121;
	// errmsg("QB110=%d QB104=%d QB106=%d",QB110,QB104,QB106);
    if QB104 in 0:4 & QCAGEM > 5 then            { children age 6-59 months }
      // Tabulating table HC1: Hemoglobin measurement: children
      tables_bm = 121;
	  fmeasure = measure1(zzQB122);
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );

	  if !special(zzQB122) & zzQB122 < 99 then
        // Tabulating table HQ1: Accuracy of children's hemoglobin level
        tables_bm = 131;
        fdigit  = GetDecimal( zzQB122, 1 );
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );

        // Tabulating table HR1: Children with severe anemia
        tables_bm = 133;
        if zzQB122 < 8 then
		  fanem = 1;
          Itab(curDs, intNumber);
          Itab(curDs, tRegion  );
		endif;
		fanem = 2;
        Itab(curDs, intNumber);
        Itab(curDs, tRegion  );

	  endif;

      // Table MC1: Malaria RDT testing among children - for 6-59 months
      tables_bm = 141;
	  if zzQBM114 <> notappl then
        recode zzQBM114 -> fmeasure;
	             1,2  -> 1;
			      4   -> 2;
				  5   -> 3;
				  6   -> 6;
		              -> 9;
	    endrecode;
	  else
	    // use fmeasure set for hemoglobin measurement for not present, refused or other
	    fmeasure = measure1(zzQB122);
		if fmeasure = 1 then fmeasure = 9 endif; // set to missing if hemoglobin measured, but malaria RDT is missing
	  endif;
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );

	endif;
}
  enddo; // loop through biomarkers for children

{ --------------------------------------------------------------------------- }

  fsex = 2;

  for c in record QBSEC02 do

    intNumber = QB209;

    // Tabulating table AC3: Weight/height measurement: women
    tables_bm = 103;
    { result of measurement based on height. If height is measured but weight is not use weight - see footnote }
	fmeasure = measure3(QB205,QB207);
    Itab(curDs, intNumber);
    Itab(curDs, tRegion  );
	  
    // Tabulating table AQ7: Height digit preference: women
    tables_bm = 117;
	if !special(QB207) & QB207 < 999 then
      fdigit = GetDecimal( QB207, 1 );
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
    endif;
{	
    // Tabulating table HC2: Hemoglobin measurement: women
    tables_bm = 122;
	if zzQB220 = notappl then
      intNumber = zzQB216;	// 18+ or ever married
	else
	  intNumber = zzQB220;	// <18 and never married
	endif;
	fmeasure = measure1(zzQB225);
    Itab(curDs, intNumber);
    Itab(curDs, tRegion  );

    // Tabulating table HQ2: Accuracy of women's hemoglobin level
    tables_bm = 132;
    if !special(zzQB225) & zzQB225 < 99 then
      fdigit  = GetDecimal( zzQB225, 1 );
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
	endif;
}
  enddo; // loop through biomarkers for women

{ --------------------------------------------------------------------------- }

  fsex = 1;

  for c in record QBSEC03 do
  
    intNumber = QB309;

    // Tabulating table AC4: Weight/height measurement: men
    tables_bm = 104;
    { result of measurement based on height. If height is measured but weight is not use weight - see footnote }
	fmeasure = measure3(QB305,QB307);
    Itab(curDs, intNumber);
    Itab(curDs, tRegion  );

    // Tabulating table AQ7: Height digit preference: men
    tables_bm = 117;
	if !special(QB307) & QB307 < 999 then
      fdigit = GetDecimal( QB307, 1 );
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
    endif;
{
    // Tabulating table HC3: Hemoglobin measurement: men
    tables_bm = 123;
	if zzQB320 = notappl then
      intNumber = zzQB316;	// 18+ or ever married
	else
	  intNumber = zzQB320; 	// <18 and never married
	endif;
	fmeasure = measure1(zzQB325);
    Itab(curDs, intNumber);
    Itab(curDs, tRegion  );

    // Tabulating table HQ2: Accuracy of men's hemoglobin level
    tables_bm = 132;
    if !special(zzQB325) & zzQB325 < 99 then
      fdigit  = GetDecimal( zzQB325, 1 );
      Itab(curDs, intNumber);
      Itab(curDs, tRegion  );
	endif;
}
  enddo; // loop through biomarkers for men

 endif; // QHRESULT = 1

 endif; // !(allteams & int(QHSUPERV / 100) <> globalContext)
enddo; // loop through households

{ --------------------------------------------------------------------------- }
// Tally minimum and maximum durations for tables P2, P3, P4
list string keys;
tables_hh = 12; 
hhdurmin.getkeys(keys); do i = 1 while i <= length(keys); intNumber=tonumber(keys(i)); fdur = 1; Itab(Ds1, intNumber, hhdurmin(intNumber)); enddo;
hhdurmax.getkeys(keys); do i = 1 while i <= length(keys); intNumber=tonumber(keys(i)); fdur = 2; Itab(Ds1, intNumber, hhdurmax(intNumber)); enddo;
tables_wm = 13; 
wmdurmin.getkeys(keys); do i = 1 while i <= length(keys); intNumber=tonumber(keys(i)); fdur = 1; Itab(Ds2, intNumber, wmdurmin(intNumber)); enddo;
wmdurmax.getkeys(keys); do i = 1 while i <= length(keys); intNumber=tonumber(keys(i)); fdur = 2; Itab(Ds2, intNumber, wmdurmax(intNumber)); enddo;
{+Man}
tables_mn = 14;
mndurmin.getkeys(keys); do i = 1 while i <= length(keys); intNumber=tonumber(keys(i)); fdur = 1; Itab(Ds3, intNumber, mndurmin(intNumber)); enddo;
mndurmax.getkeys(keys); do i = 1 while i <= length(keys); intNumber=tonumber(keys(i)); fdur = 2; Itab(Ds3, intNumber, mndurmax(intNumber)); enddo;
{Man+}


{ *************************************************************************** }
{                            POST PROCESSING                                  }
{ --------------------------------------------------------------------------- }
  // The only post processing is writing out all of the counts in the data sources
  // Writing data source to CSV
 writeDataSource(Ds0); // interviews by team and cluster
 writeDataSource(Ds1); // households by team and interviewer, region
 writeDataSource(Ds2); // women by team and interviewer, region
 writeDataSource(Ds3); // men by team and interviewer, region
 writeDataSource(Ds4); // biomarkers by team and interviewer, region
 writeDataSource(Ds5); // indicators by team only

  // Writing out all data sources to currently open XML
  AppendXml();

  // Writing out HTML document
 WriteHtml(Path.Concat(application, maketext("output_%d.html",tx)));

enddo;  // Closing loop for output per team - search for 'ClearDataMatrix' for start of loop

//Closing XML file
EndWriteXML();
errmsg("The analysis is completed please exit");
//!!! save setting to record date of last successful FCT run
savesetting("LastFCTRun", edit("99999999",( sysdate("YYYYMMDD") )));
stop(1);
