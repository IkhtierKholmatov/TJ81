{Application 'SELECTHH' logic file generated by CSPro }
PROC GLOBAL

  numeric wcluster, wtype, i, xok;
  numeric fract, selurb, selrur, tobesel, tothh, trackhh, counthh, nothh;
  numeric factanem, beganem, factmen, begmen, hhnum, pct30, rounding;
  
  string oneline;

  { function to check the number of households and if the selection was already done for the cluster }
  function validate()
    xok = 1;
    { check with sample file }
    if YURBRUR = 1 & tothh < selurb | YURBRUR = 2 & tothh < selrur then
      errmsg( 900, tothh, selurb, selrur );
      xok = 0;
    endif;
    SCLUSTER = wcluster;
    if loadcase( SEGMENT_DCT, SCLUSTER ) & SSEGHH in 1:2000 then
      pct30 = int( SSEGHH * 0.30 );
    else
      pct30 = int( YTOTHH * 0.30 );
    endif;
    if !tothh in YTOTHH-pct30:YTOTHH+pct30 then
      errmsg( 910, tothh, YTOTHH );
      xok = 0;
    endif;
    { check if households have already been selected for cluster }
    XCLUSTER = wcluster;
    if loadcase( SAMPSEL, XCLUSTER ) then
      errmsg( 915, XCLUSTER );
      xok = 0;
    endif;
    validate = xok;
  end

  { set value sets based on language }
  function OnChangeLanguage()
    SetLanguage( getlanguage() );
  end;

PROC FL_CNULL
preproc

  wcluster = tonumber( sysparm()[1:4] );
  wtype    = tonumber( sysparm()[5:1] );   { 1-just list all eligible HH, 2-Do the actual selection }
  SetLanguage( getlanguage() );

  YCLUSTER = wcluster;
  if !loadcase( CLUSTERS, YCLUSTER ) then
    errmsg( 920, YCLUSTER );
    stop(1);
  endif;

  seed( wcluster );
  tothh     = 0;        { store total households listed }
  nothh     = 0;        { other included that aren't households }
  hhnum     = 0;        { keep track of selected households }
  counthh   = 0;        { total household counter }
  factanem  = 2;        { !!! this correspond to 50% to be selected for anemia or to put it differently one every other household }
  factmen   = 3;        { !!! this correspond approximately to 30% to be selected for male survey or to put it differently one every three households }
  selurb    = 20;       { !!! number of households to be selected in urban clusters }
  selrur    = 25;       { !!! number of households to be selected in rural clusters }

  tobesel = selurb;
  if YURBRUR = 2 then tobesel = selrur endif;

  { set the name for the HTML file }
  HTML_InitAlign();
  HTMLname = "SelectHH.html";
  if FileExist( HTMLname ) then
    FileDelete( HTMLname )
  endif;
  setfile( HTMLFile, HTMLname, create );

  if wtype = 1 then                           { list all households }
    { initialize the report headings }
    zstring1 = MakeText( tr("Households Eligible for Selection for Cluster: %d"), wcluster );
    zstring2 = tr("Include only true households");
    CellValues(1) = tr("Number");
    CellValues(2) = tr("Name of Household Head");
    CellValues(3) = tr("Address");
    CellValues(4) = tr("Interviewer");
    { specify columns that are left aligned, strings are left aligned }
    CellAlign(1) = 2;  // column 2 is household head 
    CellAlign(2) = 3;  // column 3 address
    HTML_Header( CellAlign, zstring1 );  // generates a general HTML header
  else
    zstring1 = MakeText( tr("Households Selected for Cluster: %d"), wcluster );
    zstring2 = tr("Households to be visited");
    CellValues(1) = tr("Number");
    CellValues(2) = tr("Name of Household Head");
    CellValues(3) = tr("Address");
    CellValues(4) = tr("Anemia");
    CellValues(5) = tr("Males");
    CellValues(6) = tr("Int");
     { specify columns that are left aligned, strings are left aligned }
    CellAlign(1) = 2;  // column 2 is household head 
    CellAlign(2) = 3;  // column 3 address
  endif;

  if wtype = 1 then                           { list all households }
    while loadcase( HHLISTING ) do
      do i = 1 while i <= soccurs( RECORD2 )
        if LTRUEHH(i) in 1,2 then
	      hhnum = hhnum + 1;
          if hhnum = 1 then	  
            HTML_BeginTable( CellValues, zstring2, 4 );  // generates the HTML table script with the column headers
	      endif;
	      { populates the elements of a row based on household information }
          CellValues(1) = edit("9999", LNUMBER(i));
          CellValues(2) = strip(LNAME(i));
          CellValues(3) = strip(LADDRESS(i));
          CellValues(4) = edit("9999", LINTNUM);
          HTML_OneRow( CellValues, 4 );   // generates the HTML script for a row with relevant household data
          if LTRUEHH(i) = 1 then
            tothh = tothh + 1;
          else
            nothh = nothh + 1;
          endif;
        endif;
      enddo;
    enddo;
	if hhnum then
      HTML_EndTable();
      oneline = maketext( tr("Households expected for selection: %d"), tobesel ); 
	  oneline = oneline + ", " + maketext(tr("households available for selection %d"), tothh ); 
	  oneline = oneline + ", " + maketext(tr("entries not classified as households %d"), nothh );
      HTML_Paragraph( oneline  );
    else
      HTML_ParagraphS( tr("There are no households available for the cluster") );
	endif;
    HTML_End();
  else                                        { select households }
    { first count all household listed }
    while loadcase( HHLISTING ) do
      do i = 1 while i <= soccurs( RECORD2 )
        if LTRUEHH(i) = 1 & LINTRO(i) in "1","2" then
          tothh = tothh + 1;
        endif;
      enddo;
    enddo;
    { check against clusters and whether selection was already done }
    if validate() in 0 then
      xok = accept( tr("Do you want to select households anyway?"), tr("Yes"), tr("No") );
    endif;
    if xok = 1 then
      if tothh <= tobesel then
        fract    = 1;
        rounding = 0;
        trackhh  = 1;
      else
        fract   = tothh / tobesel;
        rounding = 0.9;
        trackhh = random( 1, fract );
      endif;
      beganem = int( random( 1, factanem ) );
      begmen  = int( random( 1, factmen ) );
      close( HHLISTING );
      open( HHLISTING );
      while loadcase( HHLISTING ) do
        do i = 1 while i <= soccurs( RECORD2 )
          if LTRUEHH(i) = 1 & LINTRO(i) in "1","2" then
            counthh = counthh + 1;
            if counthh = int(trackhh+rounding) then     { this is to simulate a ROUND UP function }
              hhnum   = hhnum + 1;
              if hhnum = 1 then	  
                HTML_BeginTable( CellValues, zstring2, 6 );  // generates the HTML table script with the column headers
	          endif;
              XNUMBER(hhnum)   = hhnum;
              XNAME(hhnum)     = LNAME(i);
              XADDRESS(hhnum)  = LADDRESS(i);
              XINTCODE(hhnum)  = 0;
              XINTDATE(hhnum)  = 0;
              XRESULT(hhnum)   = 0;
              XMALE(hhnum)     = 2;
              if (hhnum-begmen)%factmen = 0 then
                XMALE(hhnum) = 1;
              endif;
              XANEMIA(hhnum)   = 2;
              if (hhnum-beganem)%factanem = 0 then
                XANEMIA(hhnum) = 1;
              endif;
              { populates the elements of a row based on household information }
              CellValues(1) = edit("9999", XNUMBER(hhnum));
              CellValues(2) = strip(XNAME(hhnum));
              CellValues(3) = strip(XADDRESS(hhnum));
              CellValues(4) = edit("9", XANEMIA(hhnum));
              CellValues(5) = edit("9", XMALE(hhnum));
              CellValues(6) = edit("9999", LINTNUM);
              HTML_OneRow( CellValues, 6 );   // generates the HTML script for a row with relevant household data
              trackhh = trackhh + fract;
            endif;
          endif;
        enddo;
      enddo;
      XCLUSTER = wcluster;
      XTOTAL   = hhnum;
      writecase( SAMPSEL );
	  if hhnum then
        HTML_EndTable();
        oneline = maketext( tr("Households selected in cluster: %d"), soccurs(SAMREC2) );
		oneline = oneline + ", " + maketext( tr("households listed for selection %d"), counthh );
        HTML_Paragraph( oneline  );
      else
        HTML_ParagraphS( tr("There are no households available for the cluster") );
      endif;
      HTML_End();
    endif;
  endif;
  view( "file://" + pathname(application) + HTMLName );

  stop(1);
