PROC GLOBAL
{ CKID program master version - 1.0.0 of 4/06/2021 }

  FILE   fname;                        { write file with or without errors }
  FILE   ReadMSG;                      { file used to read the error messages }

  string blanks;
  string yresult, zcluster;
  string textsex;                      { textual sex for individual questionnaire }
  string measure;                      { biomarkers complete (Y/N) }
  string xstring;                      { to print addresses and names }
  string FileHH, FileIN;               { strings to get the files for households and women }
  string AlphaMSG;                     { string used to read error messages }
  string xbiom, xhw, xanem, xhiv;

  array transHIV(200);                 { array to know barcodes in the transmittal that are not in questionnaires for HIV }
  array transMAL(200);                 { array to know barcodes in the transmittal that are not in questionnaires for MALARIA }

  string transname;                    { transmittal sheet file names }
  array string barcodeHIV(200);         { stores barcodes for HIV }
  array string barcodeMAL(200);         { stores barcodes for MALARIA or other biomarker }

  array arrayhh(200);                    { to check that all individuals are linked to households }
  array arraywm(200);
  
  list string MessageAvail;              { to load the error messages depending on laguage used }
  list string ListErrmsg;                { to keep track of error messages }

  numeric found, ycluster, fwrt, e, hhe, bioe, wme, casepart, x, i, j;
  numeric xht, xhc, xhi, xit, xic, xii, chbio, wmbio, mnbio, casefound, centoff;
  numeric hogregis, chktot, rwrthha, xlen, siblings, hhOK, newhh, bioexist;
  numeric tbcodeshiv, tbcodesmal, ors, ipos, calbeg, methuse;

  { create a file to know if cluster has structural errors }
  function FileReturn( errors )
    setfile( fname, ".\Errors.txt", create );
    if errors then
      FileWrite( fname, "WITH ERRORS" )
    else
      FileWrite( fname, "NO ERRORS" )
    endif;
  end;

  { function used to load messages according to the language used by the application }
  { massages are stored in string list MessageAvail and used later by function       }
  { GetMessage to retrieve the actual message                                        }
  function LoadMSG()
    numeric k, l, langfound = 0, endlang = 0;
	string ylang;
    open( ReadMSG );
    while FileRead( ReadMSG, AlphaMSG ) & !endlang do
      if length(AlphaMSG) then
	    if pos("LANGUAGE", toupper(AlphaMSG)) = 1 then
          do k = 1 while AlphaMSG[k:1] <> "=" enddo;
          do k = k+1 while AlphaMSG[k:1] = " " enddo;
          l = length(AlphaMSG);
		  ylang = AlphaMSG[k:l-k+1];
          if toupper(ylang) = toupper(getlanguage()) then
		    langfound = 1;
            while FileRead( ReadMSG, AlphaMSG ) & !endlang do
//            errmsg( "Message 1=%s", AlphaMSG );
              if length(AlphaMSG) then
	            if pos("LANGUAGE", toupper(AlphaMSG)) = 1 then
                  endlang = 1;
			    else
                  do k = 1 while AlphaMSG[k:1] = " " enddo;
				  if AlphaMSG[k:1] in "0":"9" then
//                  errmsg( "Message 2=%s", AlphaMSG );
                    MessageAvail.add( AlphaMSG )
				  endif;
			    endif;
			  endif;
            enddo;
          endif;  
        endif;
      endif;
    enddo;
	LoadMSG = langfound;
  end;

  { function to go over string list MessageAvail to retrieve errors numbers passed by the application.   }
  { Once a message is found, ListErrMsg stores all messages identified in the run and display them later }
  function GetMessage( error )
    numeric errorno, k, l, n, errfound = 0;
    do n = 1 while n <= MessageAvail.length() 
	  AlphaMSG = MessageAvail(n);
      do k = 1   while AlphaMSG[k:1] =  " " enddo;
      do l = k+1 while AlphaMSG[l:1] <> " " enddo;
      errorno = tonumber( AlphaMSG[k:l-k] );
      if errorno = error then
        errfound = 1;
        break;
      endif;
    enddo;
    if !errfound then
	  e = errmsg( 50001, error );
    endif;
    close( ReadMSG );
  end;

PROC FL_CNULL
preproc

  ycluster = 0;
  fwrt     = 0;           { to control when to update control file }
  rwrthha  = 0;           { to control when to update household assignment file }
  centoff  = 0;           { set to 1 when running at the central office }

  newhh    = 0;           { households added }
  xht      = 0;           { households }
  xhc      = 0;
  xhi      = 0;
  xit      = 0;           { individuals }
  xic      = 0;
  xii      = 0;
  e        = 0;           { control for errors in all households }
  calbeg = cmcode(1, 2015);   { !!! modify according to year the calendar begins in survey  }

  zcluster = sysparm()[1:4];                { cluster number }
  chktot   = tonumber( sysparm()[5:1] );    { if checking totals }
  SetLanguage( GetLanguage() );

  { set files to read error messages (MGF) and to report errors (ERR) }
  setfile( ReadMsg,  ".\CheckID.mgf" );
  MessageAvail.clear();                     { clear list of messages available for the run }
  if !LoadMSG() then
    errmsg( 50000 );
	stop(1);
  endif;
  ListErrmsg.clear();                       { clear the array of error messages }

  { initialize arrays to check that all women are linked to a household }
  do i = 1 while i <= 200
    arrayhh(i) = 0;
    arraywm(i) = 0;
  enddo;

  { Get and set household and women file names }
  FileHH = filename( TJHH80 );
  FileIN = filename( TJIN80 );

  { set the name for the HTML file }
  HTML_InitAlign();
  HTMLname = "CheckID.html";
  if FileExist( HTMLname ) then
    FileDelete( HTMLname )
  endif;
  setfile( HTMLFile, HTMLname, create );

  { initialize the report headings }
  zstring1 = MakeText( tr("Status for cluster: %s"), zcluster );
  zstring2 = tr("Interviews collected in cluster");
  CellValues(1) = tr("HH/Line");
  CellValues(2) = tr("Interviewer");
  CellValues(3) = tr("Address/Name");
  CellValues(4) = tr("Result");
  CellValues(5) = tr("Visits");
  CellValues(6) = tr("Biomarkers");
  { specify columns that are left aligned, strings are left aligned }
  CellAlign(1) = 3;  // column 3 is household address/name 
  CellAlign(2) = 4;  // column 4 is result of the interview
  HTML_Header( CellAlign, zstring1 );  // generates a general HTML header

  { initialize transmittal sheet arrays to control duplicates }
  do j = 1 while j <= 200
    transHIV(j) = 0;
    transMAL(j) = 0;
  enddo;

  { loops over every household }
  while loadcase( TJHH80 ) do

    { load files based on first case }
    if ycluster = 0 then
     HTML_BeginTable( CellValues, zstring2, 6 );  // generates the HTML table script with the column headers
      { load supervisor control to make sure that total number of cases to be collected in cluster is assigned }
	  { it also checks that cluster was already selected for remeasurement and data were colleted }
      SSAMPLE = QHCLUST;
      if !loadcase( CONTSUP, SSAMPLE ) then
        getmessage( 50041 );
        e = ListErrMsg.add( maketext(AlphaMSG, SSAMPLE) );
        FileReturn( e );
        stop(1);
      elseif !SHTOTAL then
        getmessage( 50040 );
        e = ListErrMsg.add( maketext(AlphaMSG, QHCLUST) );
	  { check on remeasurement and if data collected for remeasurement }
      elseif SFLGMEAS <> 1 then
        getmessage( 50164 );
        e = ListErrMsg.add( AlphaMSG );
      else
        found = 0;
	    do i = 1 while i <= maxocc(SREMEAS) & SREMHH(i) <> 0
		  RCLUSTER = SSAMPLE;
		  RNUMBER  = SREMHH(i);
		  R102L    = SREMLINE(i);
		  if !loadcase( RMEASURE, RCLUSTER, RNUMBER, R102L ) then
            getmessage( 50165 );
            e = ListErrMsg.add( MakeText(AlphaMSG, RCLUSTER, RNUMBER) );
		  elseif R106 = notappl | R108 = notappl then
            getmessage( 50166 );
            e = ListErrMsg.add( maketext(AlphaMSG, RNUMBER, R102L)  );
	      endif;
		enddo;
      endif;
      { load HH assigned to interviewers to check interviewer assigned to collect household }
      XCLUSTER = QHCLUST;
      if !loadcase( SAMPSEL, XCLUSTER )  then
        getmessage( 50042 );
        e = ListErrMsg.add( maketext(AlphaMSG, XCLUSTER) );
        FileReturn( e );
        stop(1);
      endif;
      { load transmittal sheets to make sure that all barcodes for HIV in questionnaires are defined in transmittal sheets and vice versa }
      TCLUSTER = QHCLUST;
      tbcodesHIV = 0;
      if !loadcase( TRANSMIT, TCLUSTER )  then
        if chktot then
          getmessage( 50043 );
          e = ListErrMsg.add( maketext(AlphaMSG, tr("HIV"), TCLUSTER) );
        endif;
      else
        tbcodesHIV = TBCODES;
      endif;
      do i = 1 while i <= tbcodeshiv
        barcodeHIV(i) = TBARCODE(i);
      enddo;

      { !!!! if malaria or other biomarker transmittal sheet, remove this comment
      { upload transmittal sheet for malaria in case the biomarker was collected }
      transname = filename( TRANSMIT );
      do i = length( strip(transname) ) while transname[i:1] <> "." by (-1) enddo;
      ipos = i-5;
      transname[ipos:1] = "M";
      setfile( TRANSMIT, strip(transname) );
      TCLUSTER = QHCLUST;
      tbcodesMAL = 0;
      if !loadcase( TRANSMIT, TCLUSTER ) then
        if chktot then
          getmessage( 50043 );
          e = ListErrMsg.add( maketext(AlphaMSG, tr("MALARIA"), TCLUSTER) );
        endif;
      else
        tbcodesMAL = TBCODES;
      endif;
      do i = 1 while i <= tbcodesmal
        barcodeMAL(i) = TBARCODE(i);
      enddo;
      **** end comment for malaria or other biomarker transmittal sheet exist }
      ycluster  = QHCLUST;
    endif;

    chbio    = 0;   { biomarkers for children in household schedule }
    wmbio    = 0;   { biomarkers for women in household schedule }
    mnbio    = 0;   { biomarkers for men in household schedule }
    bioexist = 0;	{ to count total number of eligible biomarkers }
    hhe      = 0;   { define if there are household structural errors }
    bioe     = 0;   { define if there are biomarker errors }
    casepart = partialcs( 1, QHCLUST, QHNUMBER, 0, FileHH );
    if QHRESULT <> 1 then
      yresult = edit("9",QHRESULT) + tr("-Incomplete")
    elseif casepart then
      yresult = edit("9",QHRESULT) + tr("-Partial")
    else
      yresult = edit("9",QHRESULT) + tr("-Complete")
    endif;

    xht      = xht + 1;   { total households }

    measure = " ";
    if casepart & QHRESULT = 1 then
      { no structure checked for partial cases }
      getmessage( 50055 );
      hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
      xhi    = xhi + 1;             { partial households counted as incomplete }
    elseif QHRESULT = 1 then
      xhc    = xhc + 1;             { complete households }

      { number of records for household members }
      x = soccurs( QHSEC01X );
      if x <> QHMEMBER then
        getmessage( 50050 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHMEMBER) )
      endif;
      x = soccurs( QHSEC01 );
      if x <> QHMEMBER then
        getmessage( 50050 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHMEMBER) )
      endif;

      { eligible women }
      x = count( TJHH80.QHSEC01 where QH09 > 0 & QH04 = 2 );
      if x <> QHWOMEN then
        getmessage( 50051 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHWOMEN) )
      endif;

      {{ eligible men }
      x = count( TJHH80.QHSEC01 where QH10 > 0 & QH04 = 1 );
      if x <> QHMEN then
        getmessage( 50052 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHMEN) )
      endif;} {No men in TJ}
	  
	  {{ !!! traffic accidents in last 12 months }
      if QHAI1 = 1 <=> soccurs( QHSECA1 ) = 0 then
        getmessage( 50105 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSECA1), "QHAI1", QHAI1) )
      endif;} {No in TJ}
	  
	  {{ !!! other non-traffic accidents in last 12 months }
      if QHAI17 = 1 <=> soccurs( QHSECA2 ) = 0 then
        getmessage( 50105 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSECA2), "QHAI17", QHAI17) )
      endif; } {No in TJ}

      { household characteristics record }
      if soccurs( QHSEC02 ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSEC02)) )
      endif;

      {{ mosquito nets }
      if NAToZero(QH138) <> soccurs( QHSEC03 ) then
        getmessage( 50101 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, soccurs( QHSEC03 ), NAToZero(QH138)) )
      endif; } {No in TJ}

      { household characteristics continuation record }
      if soccurs( QHSEC04 ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSEC04)) )
      endif;
	  
	  {{ !!! if child labor used }
      numeric chlabor = count( QHSEC01 where QH07 in 5:17 );
      if chlabor <> 0 <=> soccurs( QHSECCL ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSECCL)) )
      endif; } {No in TJ}
	  
	  { !!! if child discipline used }
      numeric chdis = count( QHSEC01 where QH07 in 1:14 );
      if chdis <> 0 <=> soccurs( QHSECCD ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSECCD)) )
      endif;

      {{ food insecurity }
      if soccurs( QHSECFS ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSECFS)) )
      endif;} {No in TJ}

      { check biomarkers }

      { biomarker front page questionnaire }
      chbio = count( TJHH80.QHSEC01 where QH11 <> 0 );
      bioexist = QHWOMEN + {QHMEN +} chbio;                { !!! review what individuals are eligible for biomarkers }
      if bioexist then measure = "Y" endif;
      if bioexist <=> soccurs( QBSECOVER ) <> 1 then
        getmessage( 50100 );
        bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QBSECOVER)) )
      endif;
      { biomarkers for children }
      xbiom = tr("child");            
      xhw   = tr("height & weight");
      xanem = tr("anemia");
      for i in record QHSEC01 do
        if QH11 <> 0 then
          found = 0;
          do j = 1 while j <= soccurs( QBSEC01 ) & !found
            if QH11 = QB102(j) then
              found = 1;
              if QB104(j) = notappl | QB104(j) in 0:4 & (QB106(j) = notappl | QB108(j) = notappl) then      { height & weight }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhw, xbiom, QH11) );
              endif;
              if QCAGEM(j) in 6:59 & QB120(j) = notappl then      { anemia }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xanem, xbiom, QH11) );
              endif;
            endif;
          enddo;
          if !found then             { biomarker record missing for individual }
            getmessage( 50056 );
            bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xbiom, QH11) );
            measure = "N";
          endif;
        endif;
      enddo;
      { !!!! if malaria or other biomarker collected for children, remove this comment
      { check if barcodes recorded in children's record are in the transmittal sheet }
      for i in record ABSEC01 do
        if !AHBARMAL in "?","99990":"99998" & length( strip(AHBARMAL) ) then
          do j = 1 while j <= tbcodesMAL
            if AHBARMAL = barcodeMAL(j) then
              { check for duplicates }
              if transMAL(j) then
                getmessage( 50500 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, AHBARMAL, strip(ACNAME), transMAL(j)) );
              { otherwise mark the barcode as found with the household number }
              else
                transMAL(j) = QHNUMBER
              endif;
              break;
            endif;
          enddo;
          if chktot & j > tbcodesMAL then
            { barcode in questionnaire wasn't found in transmittal sheet }
            getmessage( 50502 );
            bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, AHBARMAL, strip(ACNAME)) );
          endif;
        endif;
      enddo;
      **** end comment for malaria for children }

      { biomarkers for women }
      xbiom = tr("woman");
      xhw   = tr("height & weight");
      xanem = tr("anemia");
      xhiv  = tr("HIV");
      for i in record QHSEC01 do
        if QH09 <> 0 then
          found = 0;
          do j = 1 while j <= soccurs( QBSEC02 ) & !found
            if QH09 = QB202(j) then
              found = 1;
              if QB205(j) = notappl | QB207(j) = notappl then  { height & weight }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhw, xbiom, QH09) );
              endif;
              if QB225(j) = notappl then                       { anemia }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xanem, xbiom, QH09) );
              endif;
             { if !length( strip(QBWHIV9(j)) )then                { HIV }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhiv, xbiom, QH09) );
              endif;}
            endif;
          enddo;
          if !found then             { biomarker record missing for individual }
            getmessage( 50056 );
            bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xbiom, QH09) );
            measure = "N";
          endif;
        endif;
      enddo;
      { check if barcodes recorded in woman's questionnaire are in the transmittal sheet }
	  {
	  for i in record QBSEC02 do
        if !QBWHIV9 in "?","99990":"99998" & length( strip(QBWHIV9) ) then
          do j = 1 while j <= tbcodesHIV
            if QBWHIV9 = barcodeHIV(j) then
              { check for duplicates }
              if transHIV(j) then
                getmessage( 50500 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QBWHIV9, strip(QWNAME), transHIV(j)) );
              { otherwise mark the barcode as found with the household number }
              else
                transHIV(j) = QHNUMBER
              endif;
              break;
            endif;
          enddo;
          if chktot & j > tbcodesHIV then
            { barcode in questionnaire wasn't found in transmittal sheet }
            getmessage( 50502 );
            bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QBWHIV9, strip(QWNAME)) );
          endif;
        endif;
      enddo;
	  }
      { !!! if women are tested for malaria.  Add here logic in a way similar to that used to check children }

      {{ biomarkers for men }
      xbiom = tr("man");
      xhw   = tr("height & weight");
      xanem = tr("anemia");
      xhiv  = tr("HIV");
      for i in record QHSEC01 do
        if QH10 <> 0 then
          found = 0;
          do j = 1 while j <= soccurs( ABSEC03 ) & !found
            if QH10 = AB302(j) then
              found = 1;
              if AB305(j) = notappl | AB307(j) = notappl then  { height & weight }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhw, xbiom, QH10) );
              endif;
              if AB325(j) = notappl then                       { anemia }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xanem, xbiom, QH10) );
              endif;
              if !length( strip(ABMHIV9(j)) )then                { HIV }
                getmessage( 50057 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhiv, xbiom, QH10) );
              endif;
            endif;
          enddo;
          if !found then             { biomarker record missing for individual }
            getmessage( 50056 );
            bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xbiom, QH10) );
            measure = "N";
          endif;
        endif;
      enddo;
      { check if barcodes recorded in men's questionnaire are in the transmittal sheet }
      for i in record ABSEC03 do
        if !ABMHIV9 in "?","99990":"99998" & length( strip(ABMHIV9) ) then
          do j = 1 while j <= tbcodesHIV
            if ABMHIV9 = barcodeHIV(j) then
              { check for duplicates }
              if transHIV(j) then
                getmessage( 50500 );
                bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, ABMHIV9, strip(AMNAME), transHIV(j)) );
              { otherwise mark the barcode as found with the household number }
              else
                transHIV(j) = QHNUMBER
              endif;
              break;
            endif;
          enddo;
          if chktot & j > tbcodesHIV then
            { barcode in questionnaire wasn't found in transmittal sheet }
            getmessage( 50502 );
            bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, ABMHIV9, strip(AMNAME)) );
          endif;
        endif;
      enddo;  } {No men in TJ}

    else
      xhi = xhi + 1;                 { incomplete households }
      if soccurs(QHSEC01X)  | soccurs(QHSEC01) | {soccurs(QHSECA1) | soccurs(QHSECA2) |}
	     soccurs(QHSEC02)   | {soccurs(QHSEC03) |} soccurs(QHSEC04) | {soccurs(QHSECCL) | }
		 soccurs(QHSECCD)   {| soccurs(QHSECFS) |
         soccurs(ABSECOVER) | soccurs(ABSEC01) | soccurs(ABSEC02) | soccurs(ABSEC03)} then
        getmessage( 50110 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QHRESULT) );
      endif;
    endif;

    { check if household was collected by the interviewer assigned to it and synchronize file }
    found = 0;
    do i = 1 while i <= XTOTAL
      if QHNUMBER = XNUMBER(i) then
        found = 1;
        { display error just to let the supervisor know about the change }
        if QHINTNUM <> XINTCODE(i) then
          getmessage( 50225 );
          ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, XINTCODE(i), QHINTNUM) );
          XINTCODE(i) = QHINTNUM;
          rwrthha     = 1;
        endif;
        { synchronize household status in HH assignment file }
        if XRESULT(i) <> QHRESULT then
          XRESULT(i) = QHRESULT;
          rwrthha    = 1;
        endif;
        { synchronize household address }
        if QHADDRESS <> XADDRESS(i) then
          XADDRESS(i) = QHADDRESS;
          rwrthha     = 1;
        endif;
        { synchronize name of household head in HH assignment file }
        if QHRESULT = 1 & length( strip(QHFIRSTN(1)) ) &
           !pos( strip(QHFIRSTN(1)) + " " + strip(QHLASTN(1)), XNAME(i) ) then
          XNAME(i) = strip(QHFIRSTN(1)) + " " + strip(QHLASTN(1));
          rwrthha  = 1;
        endif;
        break;
      endif;
    enddo;
    { if household was not found it means that it was added by an interviewer }
    { supervisor then needs to accept it as part of the sample                }
    hhOK = 1;
    if !found then
      errmsg( 50400, QHNUMBER );
      getmessage( 50400 );
      ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
      hhOK = ( accept( maketext( tr("Confirm that household %d is accepted"), QHNUMBER ), tr("Yes"), tr("No, cancel") ) = 1 );
      if hhOK then
        XTOTAL = XTOTAL + 1;
        i = XTOTAL;
        XNUMBER(i)  = QHNUMBER;
        XADDRESS(i) = QHADDRESS;
        XNAME(i)    = QH02(1);
       { XMALE(i)    = QHELIGM;} {No men in TJ}
        XINTCODE(i) = QHINTNUM;
        XINTDATE(i) = QHINTM*1000000 + QHINTD*10000 + QHINTY;
        XRESULT(i)  = QHRESULT;
        rwrthha     = 1;
        newhh = newhh + 1;
      else
        getmessage( 50401 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QHINTNUM) );
      endif;
    endif;

    { print line for the household in the report }
    if soccurs( QHSEC01X ) then
      xstring = strip(QHFIRSTN(1)) + " " + strip(QHLASTN(1));
    else
      xstring = QHADDRESS;
    endif;
    { children/women/men biomarkers available }
    x = count(TJHH80.QBSEC01 where QB106 <> notappl) + 
	    count(TJHH80.QBSEC02 where QB205 <> notappl) {+ 
		count(TJHH80.QBSEC03 where QB305 <> notappl)} ; 
    bioexist = bioexist - count(TJHH80.QBSEC01 where QB106 = notappl);   // not all eligible children are measured
	{ populates the elements of a row based on household information }
    CellValues(1) = edit("9999", QHNUMBER);
    CellValues(2) = edit("9999", QHINTNUM);
    CellValues(3) = xstring[1:30];
    CellValues(4) = yresult;
    CellValues(5) = edit("9", QHVISITS);
    CellValues(6) = edit("99", bioexist) + "-" + edit("99", x);
    HTML_OneRow( CellValues, 6 );   // generates the HTML script for a row with relevant household data

    { find a place in array of cases in the supervisor control file }
    casefound = 0;
    do i = 1 while i <= 50
      if SNUMBER(i) = 0 | SNUMBER(i) = QHNUMBER then
        casefound = i;
        break;
      endif;
    enddo;
    j = casefound;
    if casefound & hhOK then   { Only use if there is a slot and if the household is accepted }
      if SNUMBER(j) = 0 then
        SNUMBER(j) = QHNUMBER;
        SINTNUM(j) = QHINTNUM;
        fwrt = 1;
      endif;

      { accept incomplete HH and flag all of them as true }
      if QHRESULT <> 1 & SACCEPTH(j) = 0 then
        SACCEPTH(j)  = QHRESULT;
        SACCEPTI(j)  = 1;
        SACCEPTF(j)  = sysdate("YYYYMMDD");
        SACCEPTHW(j) = 1;
        fwrt = 1;
      { incomplete interviews are saved as partial to come back to them in add mode }
      elseif QHRESULT = 1 & casepart then         { partial cases need to be reset, if already accepted }
        if SACCEPTH(j) | SACCEPTI(j) | SACCEPTF(j) | SACCEPTHW(j) then
          SACCEPTH(j)  = 0;
          SACCEPTI(j)  = 0;
          SACCEPTF(j)  = 0;
          SACCEPTHW(j) = 0;
          fwrt = 1;
        endif;
      else
        if !hhe & ( SACCEPTH(j) <> QHRESULT | SACCEPTH(j) = 0 ) then   { household with no errors }
          SACCEPTH(j) = QHRESULT;
          fwrt = 1;
        elseif SACCEPTH(j) & hhe then                     { an error in the household was introduced }
          getmessage( 50210 );
          hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
          SACCEPTH(j)  = 0;
          SACCEPTI(j)  = 0;
          SACCEPTF(j)  = 0;
          SACCEPTHW(j) = 0;
          fwrt = 1;
        endif;
        { check errors on biomarkers }
        if chbio+wmbio+mnbio then
          if !bioe & !SACCEPTHW(j) then       { h/w completed & accepted for household }
            SACCEPTHW(j) = 1;
            fwrt = 1;
          elseif bioe & SACCEPTHW(j) then     { reset h/w if errors were introduced }
            SACCEPTHW(j) = 0;
            fwrt = 1;
          endif;
        elseif !SACCEPTHW(j) then             { no members eligible for h/w }
          SACCEPTHW(j) = 1;
          fwrt = 1;
        endif;
        if !hhe & !bioe & QHRESULT <> 1 & !SACCEPTF(j) then { no structural errors in an incomplete household }
          SACCEPTF(j) = sysdate("YYYYMMDD");
          fwrt = 1;
        elseif (hhe | bioe) & SACCEPTF(j) then             { structural errors introduced after being accepted }
          SACCEPTF(j) = 0;
          fwrt = 1;
        endif;
      endif;
    endif;                   { endif if slot found and HH accepted }

    if hhe | bioe then e = 1 endif;

    if QHRESULT <> 1 | casepart then next endif;  { skip women and go to next household }

    { check individual questionnaires (women/men) in the household in the loop }
    wme = 0;    { to make sure that there are no structural errors for women }
    for i in record QHSEC01 do
      if QH04 = 2 then
        QLINE     = QH09;
        xstring = tr("W-") + strip(QH02);  
        textsex = tr("woman");
     { else
        QLINE     = QH10;
        xstring = tr("M-") + strip(QH02);
        textsex = tr("man");} {No men in TJ}
      endif;
      if QH09 {| QH10} then
        xit = xit + 1;
        if loadcase( TJIN80, QHCLUST, QHNUMBER, QLINE ) then
          { populate array of individuals to check at the end if all of them are linked to a household }
          do j = 1 while j <= 200 & arrayhh(j)
            if arrayhh(j) = QHNUMBER & arraywm(j) = QLINE then
              getmessage( 50305 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif;
          enddo;
          if j <= 200 then
            arrayhh(j) = QHNUMBER;
            arraywm(j) = QLINE;
          endif;
          casepart = partialcs( 2, QCLUSTER, QNUMBER, QLINE, FileIN );
          if QRESULT <> 1 then
            yresult = edit("9",QRESULT) + tr("-Incomplete")
          elseif casepart then
            yresult = edit("9",QRESULT) + tr("-Partial")
          else
            yresult = edit("9",QRESULT) + tr("-Complete")
          endif;
          { print individual line for report }
          { populates the elements of a row based on individual information }
          CellValues(1) = edit("  99", QLINE);
          CellValues(2) = edit("9999", QINTNUM);
          CellValues(3) = xstring;
          CellValues(4) = yresult;
          CellValues(5) = edit("9", QVISITS);
          CellValues(6) = "BLANK";
          HTML_OneRow( CellValues, 6 );  // generates the HTML script for a row with relevant individual data

          if casepart & QRESULT = 1 then     { partial case, no structure checked }
            getmessage( 50200 );
            wme  = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE) );
            xii = xii + 1               { partial case counted as incomplete }

          { check for complete women }
          elseif QRESULT = 1 & QQTYPE = 2 then
            xic  = xic + 1;             { complete individuals }

            { mandatory records for complete women }
            if soccurs(QWSEC01) <> 1 | soccurs(QWSEC2A) <> 1 | soccurs(QWSEC2Y) <> 1 |
               soccurs(QWSEC2D) <> 1 | soccurs(QWSEC3A) <> 1 | soccurs(QWSEC3B) <> 1 | 
			   soccurs(QWSEC6B) <> 1 | soccurs(QWSEC07) <> 1 | soccurs(QWSEC08) <> 1 | 
			   soccurs(QWSEC09) <> 1 | soccurs(QWSEC10) <> 1 | soccurs(QWSEC11) <> 1 {| 
			   soccurs(QWSECM2) <> 1 | soccurs(QWSECG1) <> 1 } then
              getmessage( 50203 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE) );
            endif;

            { pregnancy history }
            if soccurs(QWSEC2B) <> Q212W then
              getmessage( 50206 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC2B), Q212W) )
            endif;

            { calendar }
            if !soccurs(QWSEC2C) in 1:2 then      { !! adjust according to columns used in the calendar }
              getmessage( 50205 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC2C), 2) )
            endif;

            { contraceptive use history }
            methuse = cmcode( Q313M, Q313Y );
            if Q314Y <> notappl then
              methuse = cmcode( Q314M, Q314Y );
            endif;
            if Q307N <> notappl & methuse <= calbeg & soccurs(QWSEC3C) then
              getmessage( 50204 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC3C), Q307N) )
            elseif Q307N <> notappl & !soccurs(QWSEC3C) then
              getmessage( 50202 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC3C) ) )
            endif;

            { pregnancy and postnatal care }
            if NAToZero(QESEC4) <> soccurs(QWSEC04) then
              getmessage( 50207 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC04), QESEC4) )
            endif;

            { immunization }
            if NAToZero(QESEC5) <> soccurs(QWSEC05) then
              getmessage( 50208 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC05), QESEC5) )
            endif;

            { child health }
            if NAtoZero(QESEC6) <> soccurs(QWSEC6A) then
              getmessage( 50209 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC6A), QESEC6) )
            endif;

            {{ chronic disease module }
            if soccurs(QWSECMH) <> 1 then
              getmessage( 50212 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSECMH)) )
            endif;

            { mental health module }
            if soccurs(QWSECMH) <> 1 then
              getmessage( 50215 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSECMH)) )
            endif;
			
            { maternal mortality }
            siblings = NAToZero(AMM07);
            if siblings <> soccurs(QWSECM1) | siblings <> soccurs(QWSECM3) then
              getmessage( 50216 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, siblings, soccurs(QWSECM1), soccurs(QWSECM3)) )
            endif;} {No in TJ}

            { domestic violence }
            if QVIOLEN = 1 <=> soccurs(QWSECDV) <> 1 then
              getmessage( 50217 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, QHNUMDV, soccurs(QWSECDV)) )
            endif;

            {{ female genital cutting in women's questionnaire }
            if soccurs(QWSECG1) <> 1 then
              getmessage( 50300 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) )
            endif;
            { female genital cutting daughters roster }
            if NAToZero(GCDAUGHT) <> soccurs(QWSECG2) then
              getmessage( 50301 );
              wme =  ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSECG2), GCDAUGHT) )
            endif;

            { early child development }
            if AESECECD <> soccurs(QWSECECD) then
              getmessage( 50310 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, AESECECD, soccurs(QWSECECD)) )
            endif;

            { malaria knowledge and beliefs }
            if soccurs(QWSECSBC) <> 1 then
              getmessage( 50315 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSECSBC)) )
            endif;

            { fistula }
            if soccurs(QWSECFIS) <> 1 then
              getmessage( 50320 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSECFIS)) )
            endif; } {No in TJ}
			
            {{ no men's records should exist in woman's questionnaire }
            if soccurs(AMSEC01) | soccurs(AMSEC02)  | soccurs(AMSEC3A) | soccurs(AMSEC3B) | 
			   soccurs(AMSEC04) | soccurs(AMSEC05)  | soccurs(AMSEC06) | soccurs(AMSEC07) | 
			   soccurs(AMSEC08) | soccurs(AMSECCHD) | soccurs(AMSECMH) | soccurs(AMSECGC) then
              getmessage( 50230 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif;

          { check for complete men }
          elseif QRESULT = 1 & QQTYPE = 1 then
            xic  = xic + 1;             { complete individuals }

            { mandatory records for complete men }
            if soccurs(AMSEC01)  <> 1 | soccurs(AMSEC02) <> 1 | soccurs(AMSEC3A) <> 1 |
               soccurs(AMSEC3B)  <> 1 | soccurs(AMSEC04) <> 1 | soccurs(AMSEC05) <> 1 |
               soccurs(AMSEC06)  <> 1 | soccurs(AMSEC07) <> 1 | soccurs(AMSEC08) <> 1 |
               soccurs(AMSECCHD) <> 1 | soccurs(AMSECMH) <> 1 | soccurs(AMSECGC) <> 1 then
              getmessage( 50203 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE) );
            endif;

            { no women's records should exist in a man's questionnaire }
            if soccurs(QWSEC01) | soccurs(QWSEC2A)  | soccurs(QWSEC2B)  | soccurs(QWSEC2Y)  |
               soccurs(QWSEC2C) | soccurs(QWSEC2D)  | soccurs(QWSEC3A)  | soccurs(QWSEC3B)  | 
               soccurs(QWSEC3C) | soccurs(QWSEC04)  | soccurs(QWSEC05)  | soccurs(QWSEC6A)  | 
			   soccurs(QWSEC6B) | soccurs(QWSEC07)  | soccurs(QWSEC08)  | soccurs(QWSEC09)  | 
			   soccurs(QWSEC10) | soccurs(QWSEC11)  | soccurs(QWSECCHD) | soccurs(QWSECMH)  | 
			   soccurs(QWSECM1) | soccurs(QWSECM2)  | soccurs(QWSECM3)  | soccurs(QWSECDV)  | 
			   soccurs(QWSECG1) | soccurs(QWSECG2)  | soccurs(QWSECECD) | soccurs(QWSECSBC) | 
			   soccurs(QWSECFIS) then
              getmessage( 50231 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif; }{No men in TJ}

          { check for incomplete women/men }
          else
            xii  = xii + 1;             { incomplete individuals }
            { no women records should exist in an incomplete questionnaire }
            if soccurs(QWSEC01) | soccurs(QWSEC2A)  | soccurs(QWSEC2B)  | soccurs(QWSEC2Y)  |
               soccurs(QWSEC2C) | soccurs(QWSEC2D)  | soccurs(QWSEC3A)  | soccurs(QWSEC3B)  | 
               soccurs(QWSEC3C) | soccurs(QWSEC04)  | soccurs(QWSEC05)  | soccurs(QWSEC6A)  | 
			   soccurs(QWSEC6B) | soccurs(QWSEC07)  | soccurs(QWSEC08)  | soccurs(QWSEC09)  | 
			   soccurs(QWSEC10) | soccurs(QWSEC11)  | {soccurs(QWSECCHD) | soccurs(QWSECMH)  | 
			   soccurs(QWSECM1) | soccurs(QWSECM2)  | soccurs(QWSECM3)  |} soccurs(QWSECDV)  {| 
			   soccurs(QWSECG1) | soccurs(QWSECG2)  | soccurs(QWSECECD) | soccurs(QWSECSBC) | 
			   soccurs(QWSECFIS) } then
              getmessage( 50232 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, QRESULT, textsex) );
            endif;

            {{ no men records should exist in an incomplete questionnaire }
            if soccurs(AMSEC01) | soccurs(AMSEC02) | soccurs(AMSEC3A) | soccurs(AMSEC3B) | 
			   soccurs(AMSEC04) | soccurs(AMSEC05) | soccurs(AMSEC06) | soccurs(AMSEC07) | 
			   soccurs(AMSEC08) | soccurs(AMSECGC) then
              getmessage( 50232 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, QRESULT, textsex) );
            endif;} {No men in TJ}
          endif;
        else
          getmessage( 50220 );
          wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE) );
          xii  = xii + 1;
          { print line for woman that hasn't been visited }
          yresult = tr("Not visited");
          { populates the elements of a row for an individual that hasn't been visited }
          CellValues(1) = edit("  99", QLINE);
          CellValues(2) = "BLANK";
          CellValues(3) = xstring;
          CellValues(4) = yresult;
          CellValues(5) = "BLANK";
          CellValues(6) = "BLANK";
          HTML_OneRow( CellValues, 6 );  // generates the HTML script for a row with relevant individual data
       endif;
      endif;
    enddo;

    { check individual status for household }
    j = casefound;
    if casefound & hhOK then              { a slot was found for household and it was accepted }
      if !SACCEPTI(j) & !wme then        { all individuals in household with no errors }
        SACCEPTI(j) = 1;
        fwrt = 1;
      elseif SACCEPTI(j) & wme then      { an error in any of the individuals was introduced }
        getmessage( 50211 );
        wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
        SACCEPTI(j) = 0;
        SACCEPTF(j) = 0;
        fwrt = 1;
      endif;
      if !hhe & !wme & !bioe & !SACCEPTF(j) then   { no structural errors in all individuals belonging to household }
        SACCEPTF(j) = sysdate("YYYYMMDD");
        fwrt = 1;
      endif;
    endif;

    if wme then e = 1 endif;
  enddo;                              { end loop over all households }

  { summary of the run }
  zstring2 = MakeText( tr("Summary: (HH=%02d Complete=%02d Incomplete=%02d) (Indiv.=%d Complete:%02d Incomplete:%02d)"), xht, xhc, xhi, xit, xic, xii );
  HTML_Subtitle( zstring2, 6 );          
  if newhh then
    zstring2 = MakeText( tr("Households added not originally part of the sample design %d"), newhh );
    HTML_Subtitle( zstring2, 6 );          
  endif;
  if ycluster then
	HTML_EndTable();
  endif;


  if chktot then   { totals checked when collapsing all data or when closing a cluster }

    { check that all barcodes for HIV in transmittal sheet were found in questionnaires }
    do j = 1 while j <= tbcodeshiv
      if !transHIV(j) then
        getmessage( 50501 );
        e = ListErrMsg.add( maketext(AlphaMSG, "HIV", barcodeHIV(j)) );
      endif;
    enddo;

    { !!!! if malaria or other biomarker transmittal sheet, remove this comment
    { check that all barcodes for malaria in transmittal sheet were found in questionnaires }
    do j = 1 while j <= tbcodesmal
      if !transMAL(j) then
        getmessage( 50501 );
        e = ListErrMsg.add( maketext(AlphaMSG, tr("MALARIA"), barcodeMAL(j)) );
      endif;
    enddo;
    **** end comment for malaria transmittal sheet exist }

    { check totals with supervisor control file }
    do i = 1 while i <= 50 & SNUMBER(i) by 1
    enddo;
    hogregis = i-1;
    if xht = SHTOTAL & hogregis = xht then
      if e then
        getmessage( 50151 );
        e = ListErrMsg.add( maketext(AlphaMSG, xht) );
      else
        SHCOMP   = xhc;
        SHINCOMP = xhi;
        SITOTAL  = xit;
        SICOMP   = xic;
        SIINCOMP = xii;
        SFINDATE = sysdate("YYYYMMDD");
        fwrt     = 1;
      endif;
    else
      getmessage( 50150 );
      e = ListErrMsg.add( maketext(AlphaMSG, xht, SHTOTAL, hogregis) )
    endif;

    { go sequentially over file with individuals to check if they were marked }
    { at the time of loading eligibles in the household roster loop           }
    close( TJIN80 );
    open( TJIN80 );
    while loadcase( TJIN80 ) do
      found = 0;
      do j = 1 while j <= 200 & !found
        if arrayhh(j) = QNUMBER & arraywm(j) = QLINE then
          found = 1;
        endif;
      enddo;
      if !found then
        getmessage( 50505 );
        e = ListErrMsg.add( maketext(AlphaMSG, QNUMBER, QLINE, QINTNUM) );
      endif;
    enddo;
    
    { copy remeasure variables to HH data file }
    close( RMEASURE );
    open( RMEASURE );
    while loadcase( RMEASURE ) do
      found = 0;
      QHCLUST  = RCLUSTER;
      QHNUMBER = RNUMBER;
	  if loadcase( TJHH80, QHCLUST, QHNUMBER ) then
		for j in TJHH80.QBSEC01 
		  if QHNUMBER = RNUMBER & QB102 = R102L then
			QBRTYPE  = RTYPE;
			QBWEIGHT = R106;
			QBHEIGHT = R108;
			QBLYNSTN = R109;
			QBRDAY   = R115D;
			QBRMONTH = R115M;
			QBRYEAR  = R115Y;
			QBRMEAS  = R113;
			found    = 1;
		  endif;
		enddo;    
        if found {& !e} then
    	  writecase( TJHH80 );
	    endif;
	  endif;
	enddo;
    
  endif;            { endif to check totals }
  if ListErrMsg.length() then
    { heading for report with FileWrite command }
    HTML_Paragraph( " " );
    HTML_ParagraphS( tr("SUMMARY OF OUTSTANDING ISSUES THAT NEED TO BE RESOLVED") );
	do i = 1 while i <= ListErrMsg.length()
      HTML_Paragraph( ListErrMsg(i) );
	enddo;
  endif;
  HTML_End();

  { rewrite supervisor control file if necessary }
  if fwrt then writecase( CONTSUP ) endif;
  close( CONTSUP );
  { rewrite household sample file if necessary }
  if rwrthha then writecase( SAMPSEL ) endif;
  close( SAMPSEL );

  { instructions to create a file to decide if cluster is completed }
  FileReturn( e );
  view( "file://" + pathname(application) + HTMLName );
  { totally quit application }
  stop(1);
