{Application 'FieldDWKQuest' logic file generated by CSPro }
PROC GLOBAL

  numeric   wothcode;     { Other answers code }
  numeric i, x, y, wline, totlen, aok, alphsize, firstcase;

  string alphalst;     { The alphabet }
  string alphanew;     { Alpha working variable used in checking alpha vars }
  string wothresp;     { Other answers response }

  { Function to ensure proper entry and updating of "Other" answers }
  function getother( string questnum, questocc );
    { Create alpha id for other answers file }
    { If your ID is not 8 characters in length, remember to fix the length of the level 1 ID and of OTHID in OTHERS.DCF }
    OTHID   = edit("ZZZ9",FW101);
    OTHQUES = questnum;   { question number }
    OTHOCC  = questocc;   { occurrence for multiple section/group or
                                           multipart question }
    { Get the previous response back if already entered
      in case of backtabbing or updating }
    if !loadcase( OTHERS, OTHID, OTHQUES, OTHOCC ) then
      { Otherwise initialize to blanks }
      OTHRESP = " ";
      OTHCODE = 0;
    endif;
    wothresp = OTHRESP;
    wothcode = OTHCODE;
  end;

  { Function to check entry of alpha string variables }
  function alphachk( string alphavar, alphlen, string tail );
    { alphavar: the actual string to be checked }
    { alphlen:  length of first consecutive part for the field, e.g. A-G is 7 }
    { tail:     the last characters in the valid string }
    alphanew = alphalst[1:alphlen];         { string of acceptable values }
    alphanew = concat( strip(alphanew), strip(tail) );
    totlen   = length( strip(alphanew) );
    { aok = 0 - string is bad, aok = 1 - string is good }
    aok = 0;           { assume string is bad - for empty string }
    alphsize = length( strip(alphavar) );
    if alphsize then   { not empty string }
      { check for "?" as only character }
      aok = (alphavar[1:1] = "?" & alphsize = 1);
      if !aok then     { if not a single "?", check string }
        aok = 1;       { now assume string is good until we know otherwise }
        i = 1;         { l is position in string of acceptable values }
        x = 1;         { a is position in input string }
        { loop while the string is still good and there are more letters }
        while aok & x <= alphsize do
          aok = ( alphavar[x:1] = " " | pos( alphavar[x:1], alphanew[i:totlen-i+1] ) );
          if aok then     { letter is acceptable }
            i = i + aok;  { increment l to position after letter in string of acceptable values }
            x = x + 1     { increment a to next letter in input string }
          endif
        enddo
      endif
    endif;
    alphachk = (!aok);    { alphachk = 0 - if string is good, = 1 - if string is bad }
  end;

  { accoomodates the values of an alpha variable
    Examples:
    alphavar    alphamask     alphanew
    "ABC"       "ABCDEX"      "ABC   "
    "AC"        "ABCDEX"      "A C   "
    "BEX"       "ABCDEX"      " B  EX"
    "?"         "ABCDEX"      "??????"
  }
  function reposition( string alphavar, string alphamask );
    alphanew = "";
    do x = 1 while x <= length(alphamask)
      if pos(alphamask[x:1],alphavar) then
        alphanew[x:1] = alphamask[x:1]
      elseif pos("?",alphavar) then
        alphanew[x:1] = "?"
      else
        alphanew[x:1] = " "
      endif;
    enddo;
  end;

  { function to close the interview }
  function endmess( );
    numeric zz = 2;
    { Returns true if response is REVIEW }
    if demode() = add then
      zz = accept( tr("End of questionnaire, do you want to:"),
                  tr("Review Interview"),
                  tr("Finalize Interview") );
    endif;
    endmess = ( zz = 1 );
  end;

  { setup basic user bar }
  function userbase();
    userbar( clear );
    userbar( add button, "<",    do("PreviousField") );
    userbar( add button, ">",    do("NextField") );
    userbar( add button, ">>|",  do("AdvanceToEnd") );
    userbar( add button, "Lang", do("ChangeLanguage") );
  end;

  { set value sets based on language }
  function OnChangeLanguage()
    SetLanguage( getlanguage() );
  end;

PROC FIELDWKQUEST_FF
preproc

  alphalst  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  firstcase = 1;

  { set font for value sets }
  setfont( All, "Arial", 18, bold );

  { set up minimal user bar }
  userbase();
  userbar( show );
  { set the language at the start of the program, defaulting to English }
  setlanguage( getlanguage() );

PROC LEVEL_1
postproc
  endlevel
PROC FW000
preproc
  $ = "KE8";      { !!! change to country code and phase, should be the same as in HV000 in recode file }

PROC FW101
preproc
  $ = tonumber(sysparm()[3:4]);
postproc
  { !!! remove this postproc procedure for paper or CAFE surveys }
  ICODE = $;
  if !loadcase( INTERV, ICODE ) then
    errmsg( 120, $ );
  elseif accept( maketext(tr("Is %s the correct name for this fieldworker?"), toupper(strip(INAME)) ), 
                 tr("1-Yes"), tr("2-No") ) = 2 then
    reenter
  endif;

PROC FW105
  { !!! remove this procedure for paper or CAFE surveys }
  if ISEX <> $ then
    errmsg( 121, ISEX, strip(INAME) );
  endif;
PROC FW110
onfocus
  mkedvalset(getsymbol(), maxgrade(FW109), 0,1 );
PROC FW111
  if $ = 96 then
    wline = 0;
    getother( GetSymbol() , 0 );
    enter FL_OTHERS
  endif;

PROC FW112
  if $ = 96 then
    wline = 0;
    getother( GetSymbol() , 0 );
    enter FL_OTHERS
  endif;

PROC FW113
  if alphachk( $, 18, "X" ) then
    errmsg( 998 );
    reenter
  elseif pos( "X", $ ) then
    wline = 0;
    getother( GetSymbol(), 0 );
    enter FL_OTHERS
  endif;
  reposition( $, "ABCDEFGHIJKLMNOPQX" );        { !!! include only the codes used in the questionnaire }
  $ = alphanew;

PROC FW114
  y = $;
  if $ = 96 then y = 14 endif;               { !!! change to position of x in following string }
  x = pos( FW113[y:1], "ABCDEFGHIJKLMNOPQX" );   { !!! include only codes used in the questionnaire }
  if x <> y then
    if accept(tr("Mother's tongue is not spoken by interviewer, is that correct?"), 
	          tr("1-Yes"), tr("No") ) = 2 then
      reenter;
    endif;
  endif;
  if $ = 96 then
    wline = 0;
    getother( GetSymbol() , 0 );
    enter FL_OTHERS
  endif;

PROC FW116
  if $ = 3 then
    skip to FW118
  endif;
PROC FW118
  if $ = 1 then
    wline = 0;
    getother( GetSymbol() , 0 );
    enter FL_OTHERS
  endif;
  
  if endmess() then
    reenter
  else
    endlevel;
  endif;
PROC OTHSEC
  { Check text of response has changed and if so write it out }
  if compare(OTHRESP,wothresp) <> 0 | OTHCODE <> wothcode then
    x = writecase(OTHERS);
  endif;

PROC OTHRESP
  { Check that response is alphabetic and starts in the first column }
  if !pos($[1:1],alphalst) then
    reenter
  endif;

PROC OTHCODE
preproc
  { Initialize code for other answer to zero and skip variable }
  noinput;

